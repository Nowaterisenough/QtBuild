# =============================================================================
# Qt Build Workflow Template
# Standardized workflow format for all Qt build configurations
# =============================================================================

name: build-qt{QT_MAJOR}-{PLATFORM}_{ARCH}_{COMPILER}_matrix

on:
  workflow_dispatch:
    inputs:
      qt_version:
        description: 'Qt Version'
        required: true
        default: '{DEFAULT_QT_VERSION}'
        type: string
      compiler_version:
        description: '{COMPILER_NAME} Version'
        required: true
        default: '{DEFAULT_COMPILER_VERSION}'
        type: choice
        options: {COMPILER_OPTIONS}
      vulkan_sdk:
        description: 'Vulkan SDK (none for disable, runtime-* for specific version)'
        required: true
        type: choice
        options:
        - 'none'
        - 'runtime-1.4.321.0' 
        - 'runtime-1.3.290.0'
        default: 'none'
      test_mode:
        description: 'Test Mode (build qtbase only for faster testing)'
        required: true
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      create_release:
        description: 'Create Release'
        required: true
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

env:
  QT_VERSION: ${{ github.event.inputs.qt_version || '{DEFAULT_QT_VERSION}' }}
  COMPILER_VERSION: ${{ github.event.inputs.compiler_version || '{DEFAULT_COMPILER_VERSION}' }}
  VULKAN_CHOICE: ${{ github.event.inputs.vulkan_sdk || 'none' }}
  TEST_MODE: ${{ github.event.inputs.test_mode || 'false' }}
  ACTIONS_STEP_DEBUG: 'true'

jobs:
  build:
    runs-on: {RUNNER_OS}
    strategy:
      matrix:
        link_type: [static, shared]
        build_type: [release, debug, release-sepdbg]
        exclude:
          - link_type: static
            build_type: debug  # Skip static debug builds for resource efficiency
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Platform-specific setup steps go here
      {PLATFORM_SPECIFIC_STEPS}

      - name: Extract Qt version components
        id: qt_version
        run: |
          # Extract major.minor version for download URL
          # Implementation varies by platform
        shell: {SHELL_TYPE}

      - name: Download Qt source
        run: |
          # Download Qt source code
          # Implementation varies by platform
        shell: {SHELL_TYPE}

      - name: Build Qt
        run: |
          # Build Qt with specified configuration
          # Implementation varies by platform
        shell: {SHELL_TYPE}

      - name: Package binaries
        run: |
          # Create standardized archive
          # Format: qt{version}-{platform}-{arch}-{compiler}{version}-{linktype}_{buildtype}.{ext}
        shell: {SHELL_TYPE}

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: qt${{ env.QT_VERSION }}-{PLATFORM}-{ARCH}-{COMPILER}${{ env.COMPILER_VERSION }}-${{ matrix.link_type }}_${{ matrix.build_type == 'release' && 'release' || matrix.build_type == 'debug' && 'debug' || 'relwithdebinfo' }}
          path: ${{ env.ARCHIVE_NAME }}
          if-no-files-found: error

      - name: Upload build summary
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.link_type }}_${{ matrix.build_type }}
          path: ${{ env.REPORT_FILE }}
          if-no-files-found: error

      # Note: Build workflows only create and upload artifacts
      # Use the 'release-qt-unified' workflow to create releases with all platforms