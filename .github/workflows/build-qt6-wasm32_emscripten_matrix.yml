# =============================================================================
# Qt 6 WASM Emscripten Build Matrix
# Standardized workflow for building Qt with Emscripten for WebAssembly
# =============================================================================

name: build-qt6-wasm32_emscripten_matrix

on:
  workflow_dispatch:
    inputs:
      qt_version:
        description: 'Qt Version'
        required: true
        default: '6.9.2'
      compiler_version:
        description: 'Emscripten Version'
        required: true
        default: '4.0.13'
        type: choice
        options:
        - '3.1.70'
        - '4.0.13'
      host_gcc_version:
        description: 'Host GCC Version (MinGW for cross-compilation)'
        required: true
        default: '15.2.0'
        type: choice
        options:
        - '15.2.0'
        - '15.1.0'
        - '14.2.0'
        - '14.1.0'
        - '13.2.0'
        - '13.1.0'
        - '12.2.0'
      host_qt_url:
        description: 'Host Qt Download URL'
        required: false
        default: 'https://github.com/Nowaterisenough/QtBuild/releases/download/qt6.9.2-windows-mingw15.2.0-ucrt-20250819063525/qt6.9.2-windows-x86_64-mingw_gcc15.2.0_ucrt-shared_release.7z'
      vulkan_sdk:
        description: 'Vulkan support (none/runtime-*)'
        required: true
        type: choice
        options:
        - 'none'
        - 'runtime-1.4.321.0'
        - 'runtime-1.3.290.0'
        default: 'runtime-1.4.321.0'
      test_mode:
        description: 'Test Mode (only build qtbase)'
        required: true
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

env:
  QT_VERSION: ${{ github.event.inputs.qt_version || '6.9.2' }}
  COMPILER_VERSION: ${{ github.event.inputs.compiler_version || '4.0.13' }}
  HOST_GCC_VERSION: ${{ github.event.inputs.host_gcc_version || '15.2.0' }}
  HOST_QT_URL: ${{ github.event.inputs.host_qt_url || 'https://github.com/Nowaterisenough/QtBuild/releases/download/qt6.9.2-windows-mingw15.2.0-ucrt-20250819063525/qt6.9.2-windows-x86_64-mingw_gcc15.2.0_ucrt-shared_release.7z' }}
  VULKAN_CHOICE: ${{ github.event.inputs.vulkan_sdk || 'runtime-1.4.321.0' }}
  TEST_MODE: ${{ github.event.inputs.test_mode || 'false' }}
  ACTIONS_STEP_DEBUG: 'true'

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        link_type: [static]  # WebAssembly only supports static builds
        build_type: [release, debug]  # Build both release and debug versions
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          architecture: 'x64'

      - name: Extract Qt version components
        id: qt_version
        run: |
          $version = "${{ env.QT_VERSION }}"
          $parts = $version.Split('.')
          $major_minor = "$($parts[0]).$($parts[1])"
          echo "major_minor=$major_minor" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Resolve MinGW
        id: mingw
        shell: pwsh
        run: |
          $gcc="${{ env.HOST_GCC_VERSION }}"
          $rt="ucrt"
          function Out($k,$v){echo "$k=$v" >> $env:GITHUB_OUTPUT}
          try {
            $rels = Invoke-RestMethod -Uri "https://api.github.com/repos/niXman/mingw-builds-binaries/releases" -Headers @{ "User-Agent"="GitHub-Actions" }
            $rel = $rels | Where-Object { $_.tag_name -like "$gcc-rt_v*-rev*" } | Select-Object -First 1
            if ($rel) {
              $asset = $rel.assets | Where-Object { $_.name -like "x86_64-$gcc-release-posix-seh-$rt-rt_v*-rev*.7z" } | Select-Object -First 1
              if ($asset) {
                Out "download_url" $asset.browser_download_url
                Out "file_name" $asset.name
                Out "found" "true"
                exit 0
              }
            }
          } catch { }
          $map = @{
            "15.2.0" = @{ rt="rt_v13"; rev="rev0" }
            "15.1.0" = @{ rt="rt_v12"; rev="rev0" }
            "14.2.0" = @{ rt="rt_v12"; rev="rev2" }
            "14.1.0" = @{ rt="rt_v12"; rev="rev0" }
            "13.2.0" = @{ rt="rt_v11"; rev="rev1" }
            "13.1.0" = @{ rt="rt_v11"; rev="rev1" }
            "12.2.0" = @{ rt="rt_v10"; rev="rev2" }
          }
          if (-not $map.ContainsKey($gcc)) { echo "Unsupported GCC: $gcc"; exit 1 }
          $rtv=$map[$gcc].rt; $rev=$map[$gcc].rev
          $name="x86_64-$gcc-release-posix-seh-$rt-$rtv-$rev.7z"
          $url="https://github.com/niXman/mingw-builds-binaries/releases/download/$gcc-$rtv-$rev/$name"
          Out "download_url" $url
          Out "file_name" $name
          Out "found" "fallback"

      - name: Setup MinGW64
        shell: pwsh
        run: |
          cd ..
          curl -L -o "${{ steps.mingw.outputs.file_name }}" "${{ steps.mingw.outputs.download_url }}"
          7z x "${{ steps.mingw.outputs.file_name }}"

      - name: Setup Ninja
        shell: pwsh
        run: |
          cd ..
          curl -L -o ninja.zip https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-win.zip
          mkdir ninja
          unzip -q ninja.zip -d ./ninja

      - name: Setup Vulkan SDK
        if: ${{ env.VULKAN_CHOICE != 'none' }}
        shell: pwsh
        run: |
          $choice="${{ env.VULKAN_CHOICE }}"
          $root="D:\a\QtBuild\VulkanSDK"
          New-Item -ItemType Directory -Force -Path $root | Out-Null

          switch ($choice) {
            'runtime-1.4.321.0' {
              $sdkVersion = "1.4.321.0"
              $hdrTag = "vulkan-sdk-1.4.321.0"
            }
            'runtime-1.3.290.0' {
              $sdkVersion = "1.3.290.0"
              $hdrTag = "v1.3.290"
            }
            default {
              Write-Host "Unsupported choice: $choice"; exit 1
            }
          }

          $work="$root\$sdkVersion"
          New-Item -ItemType Directory -Force -Path $work | Out-Null

          # 组装 SDK 结构
          $sdk="$work\sdk"
          $inc="$sdk\Include"
          $lib="$sdk\Lib"
          $bin="$sdk\Bin"
          New-Item -ItemType Directory -Force -Path $inc,$lib,$bin | Out-Null

          # 下载 Vulkan-Headers
          $hdrZip = Join-Path $work "Vulkan-Headers-$hdrTag.zip"
          $hdrUrl = "https://github.com/KhronosGroup/Vulkan-Headers/archive/refs/tags/$hdrTag.zip"
          Write-Host "Downloading Headers: $hdrUrl"
          try {
            Invoke-WebRequest -Uri $hdrUrl -OutFile $hdrZip -TimeoutSec 300
            if ((Get-Item $hdrZip).Length -lt 100000) { 
              Write-Host "Headers zip too small, trying alternative download..."; 
              curl -L -o "$hdrZip" "$hdrUrl" 
            }
          } catch {
            Write-Host "WebRequest failed, trying curl: $_"
            curl -L -o "$hdrZip" "$hdrUrl"
          }
          
          if (-not (Test-Path $hdrZip) -or (Get-Item $hdrZip).Length -lt 100000) { 
            echo "Headers download failed"; exit 1 
          }
          7z x "$hdrZip" -o"$work\headers" -y

          # Include - 复制头文件
          $hdrRoot=(Get-ChildItem -Path "$work\headers" -Directory | Select-Object -First 1).FullName
          if (-not (Test-Path (Join-Path $hdrRoot "include\vulkan"))) {
            echo "Vulkan headers directory not found in extracted archive"; exit 1
          }
          New-Item -ItemType Directory -Force -Path (Join-Path $inc "vulkan") | Out-Null
          Copy-Item -Path (Join-Path $hdrRoot "include\vulkan\*") -Destination (Join-Path $inc "vulkan") -Recurse -Force

          # 环境变量设置
          echo "VULKAN_SDK=$sdk" >> $env:GITHUB_ENV
          echo "VK_SDK_PATH=$sdk" >> $env:GITHUB_ENV

          # 校验
          if (-not (Test-Path "$sdk\Include\vulkan\vulkan.h")) { echo "Missing $sdk\Include\vulkan\vulkan.h"; exit 1 }
          Write-Host "Vulkan SDK ready at $sdk"
          Write-Host "Headers: $(Get-ChildItem "$sdk\Include\vulkan" | Measure-Object).Count files"

      - name: Setup Emscripten SDK
        run: |
          cd ..
          Write-Host "Setting up Emscripten SDK version ${{ env.COMPILER_VERSION }}..."
          git clone --depth 1 https://github.com/emscripten-core/emsdk.git
          cd emsdk
          .\emsdk.bat install ${{ env.COMPILER_VERSION }}
          .\emsdk.bat activate ${{ env.COMPILER_VERSION }}
        shell: pwsh

      - name: Download Host Qt
        run: |
          cd ..
          Write-Host "Downloading Host Qt..."
          $hostRoot = Join-Path (Get-Location) "Qt/${{ env.QT_VERSION }}-host"
          New-Item -ItemType Directory -Force -Path $hostRoot | Out-Null
          $archive = Join-Path $hostRoot "host-qt.7z"

          # 下载
          curl -L -o $archive "${{ env.HOST_QT_URL }}"

          # 解压：检查压缩包内部结构
          Write-Host "Checking archive structure..."
          & 7z l $archive | Select-Object -First 20

          # 解压到临时目录以检查结构
          $tempDir = Join-Path $hostRoot "temp"
          New-Item -ItemType Directory -Force -Path $tempDir | Out-Null
          & 7z x $archive "-o$tempDir" | Out-Null

          # 检查解压后的结构
          Write-Host "Extracted structure:"
          Get-ChildItem -Path $tempDir -Depth 2 | Select-Object FullName

          # 查找实际的 Qt 安装目录（可能在子目录中）
          $qtDirs = Get-ChildItem -Path $tempDir -Directory | Where-Object { 
            Test-Path (Join-Path $_.FullName "lib/cmake/Qt6HostInfo/Qt6HostInfoConfig.cmake")
          }

          if ($qtDirs) {
            $actualQtDir = $qtDirs[0].FullName
            Write-Host "Found Qt directory at: $actualQtDir"
            # 移动文件到正确位置
            Get-ChildItem -Path $actualQtDir | Move-Item -Destination $hostRoot -Force
          } else {
            # 如果在根目录找到配置文件，直接移动
            $configFile = Get-ChildItem -Path $tempDir -Recurse -Filter "Qt6HostInfoConfig.cmake" | Select-Object -First 1
            if ($configFile) {
              Write-Host "Qt6HostInfo found at: $($configFile.FullName)"
              # 计算相对于 temp 的 Qt 根目录
              $qtRoot = $configFile.Directory.Parent.Parent.Parent.FullName
              if (Test-Path $qtRoot) {
                Get-ChildItem -Path $qtRoot | Move-Item -Destination $hostRoot -Force
              } else {
                # 移动整个 temp 内容
                Get-ChildItem -Path $tempDir | Move-Item -Destination $hostRoot -Force
              }
            } else {
              Write-Host "No Qt6HostInfoConfig.cmake found, moving all content"
              Get-ChildItem -Path $tempDir | Move-Item -Destination $hostRoot -Force
            }
          }

          # 清理
          Remove-Item -Path $tempDir -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item $archive -ErrorAction SilentlyContinue

          # 最终验证
          $finalConfig = Join-Path $hostRoot "lib/cmake/Qt6HostInfo/Qt6HostInfoConfig.cmake"
          if (-not (Test-Path $finalConfig)) {
            Write-Host "ERROR: Qt6HostInfoConfig.cmake still not found at expected location"
            Write-Host "Final directory structure:"
            Get-ChildItem -Path $hostRoot -Recurse -Depth 3 | Select-Object FullName
            throw "Host Qt setup failed - Qt6HostInfoConfig.cmake not found"
          } else {
            Write-Host "SUCCESS: Qt6HostInfo found at: $finalConfig"
          }
        shell: pwsh

      - name: Prepare directories and source
        run: |
          cd ..
          mkdir Qt -ErrorAction SilentlyContinue
          cd Qt
          mkdir "${{ env.QT_VERSION }}" -ErrorAction SilentlyContinue
          mkdir "${{ env.QT_VERSION }}-${{ matrix.link_type }}" -ErrorAction SilentlyContinue
          Write-Host "Downloading Qt source code..."
          curl -L -o qt-everywhere-src.zip "https://download.qt.io/official_releases/qt/${{ steps.qt_version.outputs.major_minor }}/${{ env.QT_VERSION }}/single/qt-everywhere-src-${{ env.QT_VERSION }}.zip"
          7z x qt-everywhere-src.zip -o"${{ env.QT_VERSION }}"
        shell: pwsh

      - name: Run build script
        shell: cmd
        run: |
          setlocal enableextensions enabledelayedexpansion
          set QT_VERSION=${{ env.QT_VERSION }}
          set EMSCRIPTEN_VERSION=${{ env.EMSCRIPTEN_VERSION }}
          set BUILD_TYPE=${{ matrix.build_type }}
          set LINK_TYPE=${{ matrix.link_type }}
          call D:\a\QtBuild\QtBuild\Qt6Build\build-qt6-wasm32_emscripten.cmd !QT_VERSION! !EMSCRIPTEN_VERSION! !BUILD_TYPE! !LINK_TYPE!

      - name: Export Qt configure summary
        run: |
          $linkType = "${{ matrix.link_type }}"
          $buildType = "${{ matrix.build_type }}"
          $qtVersion = "${{ env.QT_VERSION }}"
          $emscriptenVersion = "${{ env.EMSCRIPTEN_VERSION }}"
          $gccVersion = "${{ env.GCC_VERSION }}"
          
          $buildTypeNormalized = switch ($buildType) {
            "release" { "release" }
            "debug" { "debug" }
            "release-and-debug" { "release_and_debug" }
            default { $buildType.ToLower() }
          }
          
          # Configure summary 文件路径
          $summaryFileName = "qt${qtVersion}-wasm32_emscripten${emscriptenVersion}-cross_mingw_gcc${gccVersion}-${linkType}_${buildTypeNormalized}_configure_summary.txt"
          $buildDir = "D:\a\QtBuild\Qt\$qtVersion-build-$linkType"
          $configSummaryFile = Join-Path $buildDir "config.summary"
          
          Write-Host "Looking for config.summary at: $configSummaryFile"
          
          if (Test-Path $configSummaryFile) {
            Write-Host "Found config.summary, copying to: $summaryFileName"
            Copy-Item $configSummaryFile $summaryFileName
            echo "SUMMARY_FILE=$summaryFileName" >> $env:GITHUB_ENV
            Write-Host "Configure summary exported successfully"
            
            # 显示 summary 内容的前几行
            Write-Host "Configure summary preview:"
            Get-Content $summaryFileName | Select-Object -First 20
          } else {
            Write-Host "Warning: config.summary not found at $configSummaryFile"
            
            # 尝试查找可能的 config.summary 位置
            Write-Host "Searching for config.summary files..."
            $summaryFiles = Get-ChildItem -Path "D:\a\QtBuild\Qt" -Recurse -Name "config.summary" -ErrorAction SilentlyContinue
            if ($summaryFiles) {
              Write-Host "Found config.summary files at:"
              foreach ($file in $summaryFiles) {
                Write-Host "  - $file"
              }
              # 使用第一个找到的文件
              $firstSummary = Join-Path "D:\a\QtBuild\Qt" $summaryFiles[0]
              Copy-Item $firstSummary $summaryFileName
              echo "SUMMARY_FILE=$summaryFileName" >> $env:GITHUB_ENV
              Write-Host "Using summary from: $firstSummary"
            } else {
              Write-Host "No config.summary files found"
              # 创建一个空的 summary 文件
              "Configuration summary not available for this build." | Out-File -FilePath $summaryFileName -Encoding UTF8
              echo "SUMMARY_FILE=$summaryFileName" >> $env:GITHUB_ENV
            }
          }
        shell: pwsh

      - name: Package binaries
        run: |
          $linkType = "${{ matrix.link_type }}"
          $buildType = "${{ matrix.build_type }}"
          $qtVersion = "${{ env.QT_VERSION }}"
          $emscriptenVersion = "${{ env.EMSCRIPTEN_VERSION }}"
          $gccVersion = "${{ env.GCC_VERSION }}"
          $buildTypeNormalized = switch ($buildType) {
            "release" { "release" }
            "debug" { "debug" }
            "release-and-debug" { "release_and_debug" }
            default { $buildType.ToLower() }
          }
          $linkTypeNormalized = switch ($linkType) {
            "static" { "static" }
            default { $linkType.ToLower() }
          }
          # 命名体现交叉编译与 host GCC
          $archiveName = "qt${qtVersion}-wasm32_emscripten${emscriptenVersion}-cross_mingw_gcc${gccVersion}-${linkTypeNormalized}_${buildTypeNormalized}.7z"
          $sourcePath = "D:\a\QtBuild\Qt\$qtVersion-$linkType"
          if (Test-Path $sourcePath) {
            7z a $archiveName $sourcePath -mx=9
            echo "Archive created: $archiveName"
            echo "Source path: $sourcePath"
            echo "ARCHIVE_NAME=$archiveName" >> $env:GITHUB_ENV
          } else {
            echo "Error: Source path does not exist: $sourcePath"
            exit 1
          }
        shell: pwsh

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: qt${{ env.QT_VERSION }}-wasm32_emscripten${{ env.EMSCRIPTEN_VERSION }}-cross_mingw_gcc${{ env.GCC_VERSION }}-${{ matrix.link_type }}_${{ matrix.build_type == 'release' && 'release' || matrix.build_type == 'debug' && 'debug' || 'releaseanddebug' }}
          path: |
            ${{ env.ARCHIVE_NAME }}
            ${{ env.SUMMARY_FILE }}

      # Note: This workflow only builds and uploads artifacts
      # Use the 'release-qt-unified' workflow to create releases with all platforms