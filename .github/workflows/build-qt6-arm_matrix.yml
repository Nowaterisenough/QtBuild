name: Build Qt6 ARM Cross-Compilation

on:
  workflow_dispatch:
    inputs:
      qt_version:
        description: 'Qt Version (e.g., 6.9.1)'
        required: true
        default: '6.9.1'
        type: string
      gcc_version:
        description: 'GCC Version (e.g., 13.2.0)'
        required: true
        default: '13.2.0'
        type: string
      build_type:
        description: 'Build Type'
        required: true
        default: 'release'
        type: choice
        options:
          - 'release'
          - 'debug'
      link_type:
        description: 'Link Type'
        required: true
        default: 'static'
        type: choice
        options:
          - 'static'
          - 'shared'
      separate_debug:
        description: 'Separate Debug Info'
        required: true
        default: false
        type: boolean
      arm_architectures:
        description: 'ARM Architectures to build (comma-separated)'
        required: true
        default: 'aarch64,armv7l'
        type: string
  workflow_call:
    inputs:
      qt_version:
        description: 'Qt Version (e.g., 6.9.1)'
        required: true
        type: string
      gcc_version:
        description: 'GCC Version (e.g., 13.2.0)'
        required: true
        type: string
      build_type:
        description: 'Build Type'
        required: true
        type: string
      link_type:
        description: 'Link Type'
        required: true
        type: string
      separate_debug:
        description: 'Separate Debug Info'
        required: true
        type: boolean
      arm_architectures:
        description: 'ARM Architectures to build (comma-separated)'
        required: true
        type: string
  push:
    paths:
      - 'Qt6Build/build-qt6-arm*.cmd'
      - 'Qt6Build/build-qt6-arm*.sh'
      - '.github/workflows/build-qt6-arm.yml'
  pull_request:
    paths:
      - 'Qt6Build/build-qt6-arm*.cmd'
      - 'Qt6Build/build-qt6-arm*.sh'
      - '.github/workflows/build-qt6-arm.yml'

env:
  QT_VERSION: ${{ github.event.inputs.qt_version || '6.9.1' }}
  GCC_VERSION: ${{ github.event.inputs.gcc_version || '13.2.0' }}
  BUILD_TYPE: ${{ github.event.inputs.build_type || 'release' }}
  LINK_TYPE: ${{ github.event.inputs.link_type || 'static' }}
  SEPARATE_DEBUG: ${{ github.event.inputs.separate_debug || 'false' }}
  ARM_ARCHITECTURES: ${{ github.event.inputs.arm_architectures || 'aarch64,armv7l' }}

jobs:
  build-linux-arm:
    name: Build Qt6 ARM on Linux
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - arch: aarch64
            gcc_prefix: aarch64-linux-gnu
            apt_package: gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          - arch: armv7l
            gcc_prefix: arm-linux-gnueabihf
            apt_package: gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          python3 \
          python3-pip \
          pkg-config \
          libfontconfig1-dev \
          libfreetype6-dev \
          libx11-dev \
          libx11-xcb-dev \
          libxext-dev \
          libxfixes-dev \
          libxi-dev \
          libxrender-dev \
          libxcb1-dev \
          libxcb-cursor-dev \
          libxcb-glx0-dev \
          libxcb-keysyms1-dev \
          libxcb-image0-dev \
          libxcb-shm0-dev \
          libxcb-icccm4-dev \
          libxcb-sync-dev \
          libxcb-xfixes0-dev \
          libxcb-shape0-dev \
          libxcb-randr0-dev \
          libxcb-render-util0-dev \
          libxcb-util-dev \
          libxcb-xinerama0-dev \
          libxcb-xkb-dev \
          libxkbcommon-dev \
          libxkbcommon-x11-dev \
          ${{ matrix.apt_package }}
        
        # 创建工作目录
        sudo mkdir -p /opt/QtBuild/{Qt,arm-gcc-toolchain,ninja,protoc/bin,build_arm,temp_install_arm,sysroot}
        sudo chown -R $USER:$USER /opt/QtBuild

    - name: Setup Ninja
      run: |
        wget -q https://github.com/ninja-build/ninja/releases/latest/download/ninja-linux.zip
        unzip ninja-linux.zip
        chmod +x ninja
        sudo mv ninja /opt/QtBuild/ninja/

    - name: Download Qt source
      run: |
        cd /opt/QtBuild/Qt
        if [ ! -d "$QT_VERSION" ]; then
          mkdir -p $QT_VERSION
          cd $QT_VERSION
          wget -q https://download.qt.io/official_releases/qt/${QT_VERSION%.*}/$QT_VERSION/single/qt-everywhere-src-$QT_VERSION.tar.xz
          tar -xf qt-everywhere-src-$QT_VERSION.tar.xz
          rm qt-everywhere-src-$QT_VERSION.tar.xz
        fi

    - name: Setup cross-compilation toolchain
      run: |
        # 验证交叉编译器
        which ${{ matrix.gcc_prefix }}-gcc
        ${{ matrix.gcc_prefix }}-gcc --version
        
        # 创建工具链符号链接
        sudo mkdir -p /opt/QtBuild/arm-gcc-toolchain/${{ matrix.arch }}/bin
        sudo ln -sf $(which ${{ matrix.gcc_prefix }}-gcc) /opt/QtBuild/arm-gcc-toolchain/${{ matrix.arch }}/bin/${{ matrix.gcc_prefix }}-gcc
        sudo ln -sf $(which ${{ matrix.gcc_prefix }}-g++) /opt/QtBuild/arm-gcc-toolchain/${{ matrix.arch }}/bin/${{ matrix.gcc_prefix }}-g++
        sudo ln -sf $(which ${{ matrix.gcc_prefix }}-ar) /opt/QtBuild/arm-gcc-toolchain/${{ matrix.arch }}/bin/${{ matrix.gcc_prefix }}-ar
        sudo ln -sf $(which ${{ matrix.gcc_prefix }}-strip) /opt/QtBuild/arm-gcc-toolchain/${{ matrix.arch }}/bin/${{ matrix.gcc_prefix }}-strip
        sudo ln -sf $(which ${{ matrix.gcc_prefix }}-objcopy) /opt/QtBuild/arm-gcc-toolchain/${{ matrix.arch }}/bin/${{ matrix.gcc_prefix }}-objcopy
        sudo ln -sf $(which ${{ matrix.gcc_prefix }}-objdump) /opt/QtBuild/arm-gcc-toolchain/${{ matrix.arch }}/bin/${{ matrix.gcc_prefix }}-objdump

    - name: Create minimal sysroot
      run: |
        # 创建最小sysroot结构
        mkdir -p /opt/QtBuild/sysroot/${{ matrix.arch }}/{lib,usr/lib,usr/include}
        
        # 复制一些基本的系统库文件（如果可用）
        if [ -d "/usr/${{ matrix.gcc_prefix }}" ]; then
          cp -r /usr/${{ matrix.gcc_prefix }}/* /opt/QtBuild/sysroot/${{ matrix.arch }}/
        fi

    - name: Build Qt6 for ARM
      run: |
        cd $GITHUB_WORKSPACE/Qt6Build
        chmod +x build-qt6-arm64_aarch64_gcc.sh
        ./build-qt6-arm64_aarch64_gcc.sh $QT_VERSION $GCC_VERSION $BUILD_TYPE $LINK_TYPE $SEPARATE_DEBUG ${{ matrix.arch }}

    - name: Package build results
      run: |
        cd /opt/QtBuild/Qt
        FINAL_DIR="${QT_VERSION}-${LINK_TYPE}/arm_gcc${GCC_VERSION//./_}_${{ matrix.arch }}"
        if [ -d "$FINAL_DIR" ]; then
          tar -czf "${GITHUB_WORKSPACE}/qt6-${{ matrix.arch }}-${QT_VERSION}-${LINK_TYPE}-${BUILD_TYPE}.tar.gz" "$FINAL_DIR"
          echo "Package created: qt6-${{ matrix.arch }}-${QT_VERSION}-${LINK_TYPE}-${BUILD_TYPE}.tar.gz"
          ls -lh "${GITHUB_WORKSPACE}/qt6-${{ matrix.arch }}-${QT_VERSION}-${LINK_TYPE}-${BUILD_TYPE}.tar.gz"
        else
          echo "Build directory not found: $FINAL_DIR"
          exit 1
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qt6-linux-${{ matrix.arch }}-${{ env.QT_VERSION }}-${{ env.LINK_TYPE }}-${{ env.BUILD_TYPE }}
        path: qt6-${{ matrix.arch }}-*.tar.gz
        retention-days: 30

  build-windows-arm:
    name: Build Qt6 ARM on Windows
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - arch: aarch64
            toolchain_url: "https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-mingw-w64-i686-aarch64-none-linux-gnu.zip"
            toolchain_dir: "arm-gnu-toolchain-13.2.rel1-mingw-w64-i686-aarch64-none-linux-gnu"
          - arch: armv7l
            toolchain_url: "https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-mingw-w64-i686-arm-none-linux-gnueabihf.zip"
            toolchain_dir: "arm-gnu-toolchain-13.2.rel1-mingw-w64-i686-arm-none-linux-gnueabihf"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup build environment
      run: |
        # 创建工作目录
        New-Item -ItemType Directory -Force -Path "D:\a\QtBuild\Qt"
        New-Item -ItemType Directory -Force -Path "D:\a\QtBuild\arm-gcc-toolchain"
        New-Item -ItemType Directory -Force -Path "D:\a\QtBuild\ninja"
        New-Item -ItemType Directory -Force -Path "D:\a\QtBuild\protoc\bin"
        New-Item -ItemType Directory -Force -Path "D:\a\QtBuild\sysroot"

    - name: Download and setup Ninja
      run: |
        Invoke-WebRequest -Uri "https://github.com/ninja-build/ninja/releases/latest/download/ninja-win.zip" -OutFile "ninja-win.zip"
        Expand-Archive -Path "ninja-win.zip" -DestinationPath "D:\a\QtBuild\ninja"
        Remove-Item "ninja-win.zip"

    - name: Download Qt source
      run: |
        cd D:\a\QtBuild\Qt
        if (!(Test-Path "$env:QT_VERSION")) {
          New-Item -ItemType Directory -Name "$env:QT_VERSION"
          cd "$env:QT_VERSION"
          $qtUrl = "https://download.qt.io/official_releases/qt/$($env:QT_VERSION.Substring(0,3))/$env:QT_VERSION/single/qt-everywhere-src-$env:QT_VERSION.tar.xz"
          Write-Host "Downloading Qt from: $qtUrl"
          Invoke-WebRequest -Uri $qtUrl -OutFile "qt-everywhere-src-$env:QT_VERSION.tar.xz"
          
          # 使用7-zip解压（GitHub Actions预装）
          & "C:\Program Files\7-Zip\7z.exe" x "qt-everywhere-src-$env:QT_VERSION.tar.xz"
          & "C:\Program Files\7-Zip\7z.exe" x "qt-everywhere-src-$env:QT_VERSION.tar"
          Remove-Item "qt-everywhere-src-$env:QT_VERSION.tar.xz"
          Remove-Item "qt-everywhere-src-$env:QT_VERSION.tar"
        }

    - name: Download and setup ARM GCC toolchain
      run: |
        $toolchainUrl = "${{ matrix.toolchain_url }}"
        $toolchainDir = "${{ matrix.toolchain_dir }}"
        $arch = "${{ matrix.arch }}"
        
        Write-Host "Downloading ARM GCC toolchain from: $toolchainUrl"
        Invoke-WebRequest -Uri $toolchainUrl -OutFile "arm-toolchain.zip"
        
        Write-Host "Extracting toolchain..."
        Expand-Archive -Path "arm-toolchain.zip" -DestinationPath "D:\a\QtBuild\arm-gcc-toolchain"
        
        # 重命名目录以匹配脚本期望
        if (Test-Path "D:\a\QtBuild\arm-gcc-toolchain\$toolchainDir") {
          Move-Item "D:\a\QtBuild\arm-gcc-toolchain\$toolchainDir" "D:\a\QtBuild\arm-gcc-toolchain\$arch"
        }
        
        Remove-Item "arm-toolchain.zip"
        
        # 验证工具链
        $gccPath = "D:\a\QtBuild\arm-gcc-toolchain\$arch\bin"
        Get-ChildItem $gccPath -Filter "*gcc.exe" | ForEach-Object { Write-Host "Found: $($_.Name)" }

    - name: Create minimal sysroot
      run: |
        $arch = "${{ matrix.arch }}"
        New-Item -ItemType Directory -Force -Path "D:\a\QtBuild\sysroot\$arch\lib"
        New-Item -ItemType Directory -Force -Path "D:\a\QtBuild\sysroot\$arch\usr\lib"
        New-Item -ItemType Directory -Force -Path "D:\a\QtBuild\sysroot\$arch\usr\include"
        
        # 从工具链复制基础库文件
        $toolchainPath = "D:\a\QtBuild\arm-gcc-toolchain\$arch"
        if (Test-Path "$toolchainPath\*-linux-*\libc") {
          Copy-Item "$toolchainPath\*-linux-*\libc\*" "D:\a\QtBuild\sysroot\$arch\" -Recurse -Force
        }

    - name: Build Qt6 for ARM
      run: |
        cd $env:GITHUB_WORKSPACE\Qt6Build
        $arch = "${{ matrix.arch }}"
        
        # 选择正确的构建脚本
        if ($arch -eq "aarch64") {
          & ".\build-qt6-arm64_aarch64_gcc.cmd" $env:QT_VERSION $env:GCC_VERSION $env:BUILD_TYPE $env:LINK_TYPE $env:SEPARATE_DEBUG $arch
        } else {
          & ".\build-qt6-arm32_armv7l_gcc.cmd" $env:QT_VERSION $env:GCC_VERSION $env:BUILD_TYPE $env:LINK_TYPE $env:SEPARATE_DEBUG $arch
        }

    - name: Package build results
      run: |
        cd D:\a\QtBuild\Qt
        $finalDir = "$env:QT_VERSION-$env:LINK_TYPE\arm_gcc$($env:GCC_VERSION -replace '\.','_')_${{ matrix.arch }}"
        if (Test-Path $finalDir) {
          & "C:\Program Files\7-Zip\7z.exe" a "$env:GITHUB_WORKSPACE\qt6-${{ matrix.arch }}-$env:QT_VERSION-$env:LINK_TYPE-$env:BUILD_TYPE.zip" $finalDir
          Write-Host "Package created: qt6-${{ matrix.arch }}-$env:QT_VERSION-$env:LINK_TYPE-$env:BUILD_TYPE.zip"
          Get-Item "$env:GITHUB_WORKSPACE\qt6-${{ matrix.arch }}-*.zip" | ForEach-Object { Write-Host "Size: $($_.Length / 1MB) MB" }
        } else {
          Write-Host "Build directory not found: $finalDir"
          exit 1
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qt6-windows-${{ matrix.arch }}-${{ env.QT_VERSION }}-${{ env.LINK_TYPE }}-${{ env.BUILD_TYPE }}
        path: qt6-${{ matrix.arch }}-*.zip
        retention-days: 30

  create-release:
    name: Create Release
    needs: [build-linux-arm, build-windows-arm]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
          cp "$file" release-assets/
        done
        ls -la release-assets/

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: qt6-arm-${{ env.QT_VERSION }}-${{ github.run_number }}
        release_name: Qt6 ARM Cross-Compilation ${{ env.QT_VERSION }} Build ${{ github.run_number }}
        body: |
          # Qt6 ARM Cross-Compilation Build
          
          **Build Configuration:**
          - Qt Version: ${{ env.QT_VERSION }}
          - GCC Version: ${{ env.GCC_VERSION }}
          - Build Type: ${{ env.BUILD_TYPE }}
          - Link Type: ${{ env.LINK_TYPE }}
          - Separate Debug: ${{ env.SEPARATE_DEBUG }}
          - ARM Architectures: ${{ env.ARM_ARCHITECTURES }}
          
          **Supported ARM Devices:**
          - AArch64: Raspberry Pi 4+, NVIDIA Jetson series
          - ARMv7L: Raspberry Pi 2/3, BeagleBone Black
          
          **Installation:**
          1. Download the appropriate package for your target architecture
          2. Extract to your ARM device
          3. Set environment variables as described in the documentation
          
          Built on: ${{ github.event.head_commit.timestamp || github.event.created_at }}
          Commit: ${{ github.sha }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        for file in release-assets/*; do
          if [ -f "$file" ]; then
            echo "Uploading $file..."
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$(basename "$file")"
          fi
        done
