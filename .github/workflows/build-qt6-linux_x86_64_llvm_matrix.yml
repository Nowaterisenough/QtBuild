name: build-qt6-linux_x86_64_llvm_matrix

on:
  workflow_dispatch:
    inputs:
      qt_version:
        description: 'QT Version'
        required: true
        default: '6.9.2'
      llvm_version:
        description: 'LLVM Version'
        required: true
        default: '18'
        type: choice
        options:
        - '15'
        - '16'
        - '17'
        - '18'
        - '19'
        - '20'
      vulkan_sdk:
        description: 'Vulkan support (none/runtime-*)'
        required: true
        type: choice
        options:
        - 'none'
        - 'runtime-1.4.321.0'
        - 'runtime-1.3.290.0'
        default: 'runtime-1.4.321.0'
      create_release:
        description: 'Create Release'
        required: true
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

env:
  QT_VERSION: ${{ github.event.inputs.qt_version || '6.9.2' }}
  LLVM_VERSION: ${{ github.event.inputs.llvm_version || '18' }}
  VULKAN_CHOICE: ${{ github.event.inputs.vulkan_sdk || 'runtime-1.4.321.0' }}
  ACTIONS_STEP_DEBUG: 'true'

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        link_type: [static, shared]
        build_type: [release, debug, release-sepdbg]
        exclude:
          - link_type: static
            build_type: debug
          - link_type: static
            build_type: release-sepdbg
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup WSL2 with Ubuntu 24.04
        uses: Vampire/setup-wsl@v3
        with:
          distribution: Ubuntu-24.04
          use-cache: 'false'
          set-as-default: 'true'

      - name: Extract Qt major.minor version
        id: qt_version
        run: |
          $version = "${{ env.QT_VERSION }}"
          $parts = $version.Split('.')
          $major_minor = "$($parts[0]).$($parts[1])"
          echo "major_minor=$major_minor" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Create scripts with proper line endings
        run: |
          # WSL 设置脚本
          $setupScript = "#!/bin/bash`nset -e`necho `"Setting up WSL2 environment with LLVM/Clang...`"`n`nexport DEBIAN_FRONTEND=noninteractive`n`n# 添加 LLVM APT 源`nwget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc`necho `"deb http://apt.llvm.org/noble/ llvm-toolchain-noble-${{ env.LLVM_VERSION }} main`" | sudo tee /etc/apt/sources.list.d/llvm.list`n`nsudo apt-get update`n`n# 安装 LLVM/Clang 和相关工具`nsudo apt-get install -y --no-install-recommends \`n  clang-${{ env.LLVM_VERSION }} \`n  clang++-${{ env.LLVM_VERSION }} \`n  lld-${{ env.LLVM_VERSION }} \`n  libc++-${{ env.LLVM_VERSION }}-dev \`n  libc++abi-${{ env.LLVM_VERSION }}-dev \`n  llvm-${{ env.LLVM_VERSION }}-dev \`n  cmake \`n  ninja-build \`n  python3 \`n  pkg-config \`n  libgl1-mesa-dev \`n  libglu1-mesa-dev \`n  libxkbcommon-dev \`n  libxkbcommon-x11-dev \`n  libxcb1-dev \`n  libxcb-util-dev \`n  libxcb-image0-dev \`n  libxcb-keysyms1-dev \`n  libxcb-render0-dev \`n  libxcb-render-util0-dev \`n  libxcb-randr0-dev \`n  libxcb-xtest0-dev \`n  libxcb-xinerama0-dev \`n  libxcb-shape0-dev \`n  libxcb-sync-dev \`n  libxcb-xfixes0-dev \`n  libxcb-icccm4-dev \`n  libxcb-shm0-dev \`n  libxcb-cursor-dev \`n  libfontconfig1-dev \`n  libfreetype6-dev \`n  libx11-dev \`n  libxext-dev \`n  libxfixes-dev \`n  libxi-dev \`n  libxrender-dev \`n  libxrandr-dev \`n  libxcursor-dev \`n  libxinerama-dev \`n  libxss-dev \`n  libglib2.0-dev \`n  libegl1-mesa-dev \`n  libwayland-dev \`n  libssl-dev \`n  libasound2-dev \`n  libpulse-dev \`n  libnss3-dev \`n  libxcomposite-dev \`n  libxdamage-dev \`n  libdrm-dev \`n  wget \`n  curl \`n  xz-utils`n`n# 设置默认编译器`nsudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${{ env.LLVM_VERSION }} 100`nsudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${{ env.LLVM_VERSION }} 100`nsudo update-alternatives --install /usr/bin/lld lld /usr/bin/lld-${{ env.LLVM_VERSION }} 100`n`n# 验证安装`nclang-${{ env.LLVM_VERSION }} --version`nclang++-${{ env.LLVM_VERSION }} --version`nlld-${{ env.LLVM_VERSION }} --version`n`nsudo apt-get clean`nsudo rm -rf /var/lib/apt/lists/*"
          [System.IO.File]::WriteAllText("wsl_setup.sh", $setupScript.Replace("`r`n", "`n"), [System.Text.UTF8Encoding]::new($false))

          # 下载脚本
          $downloadScript = "#!/bin/bash`nset -e`nqt_version=`"${{ env.QT_VERSION }}`"`nmajor_minor=`"${{ steps.qt_version.outputs.major_minor }}`"`nsource_url=`"https://download.qt.io/official_releases/qt/`$major_minor/`$qt_version/single/qt-everywhere-src-`$qt_version.tar.xz`"`n`necho `"Downloading Qt source...`"`nwget -O `"qt-everywhere-src-`$qt_version.tar.xz`" `"`$source_url`""
          [System.IO.File]::WriteAllText("download_qt.sh", $downloadScript.Replace("`r`n", "`n"), [System.Text.UTF8Encoding]::new($false))

          # 主构建脚本
          $mainBuildScript = "#!/bin/bash`nset -e`n`necho `"Starting Qt Linux build script with LLVM/Clang in WSL2...`"`n`nqt_version=`"`$QT_VERSION`"`nllvm_version=`"`$LLVM_VERSION`"`nbuild_type=`"`$BUILD_TYPE`"`nlink_type=`"`$LINK_TYPE`"`nseparate_debug=`"`$SEPARATE_DEBUG`"`nvulkan_choice=`"`$VULKAN_CHOICE`"`n`necho `"=== Build Parameters ===`"`necho `"Qt Version: `$qt_version`"`necho `"LLVM Version: `$llvm_version`"`necho `"Build Type: `$build_type`"`necho `"Link Type: `$link_type`"`necho `"Separate Debug: `$separate_debug`"`necho `"Vulkan Support: `$vulkan_choice`"`necho `"========================`"`n`necho `"Extracting Qt source...`"`nif [ -f `"qt-everywhere-src-`$qt_version.tar.xz`" ]; then`n    tar -xf qt-everywhere-src-`$qt_version.tar.xz`n    rm qt-everywhere-src-`$qt_version.tar.xz`nelse`n    echo `"Error: Qt source file not found`"`n    exit 1`nfi`n`nSRC_QT=`"`$(pwd)/qt-everywhere-src-`$qt_version`"`nBUILD_DIR=`"`$(pwd)/build`"`nINSTALL_DIR=`"`$(pwd)/output`"`n`nmkdir -p `"`$BUILD_DIR`"`nmkdir -p `"`$INSTALL_DIR`"`ncd `"`$BUILD_DIR`"`n`n# 设置编译器环境变量`nexport CC=clang-`${llvm_version}`nexport CXX=clang++-`${llvm_version}`nexport LLVM_INSTALL_DIR=/usr/lib/llvm-`${llvm_version}`n`n# 设置 Vulkan 环境变量（如果启用）`nif [ `"`$vulkan_choice`" != `"none`" ]; then`n    export VULKAN_SDK=`"/opt/vulkan_sdk`"`n    export VK_SDK_PATH=`"/opt/vulkan_sdk`"`n    export PATH=`"/opt/vulkan_sdk/bin:`$PATH`"`n    export LD_LIBRARY_PATH=`"/opt/vulkan_sdk/lib:`$LD_LIBRARY_PATH`"`n    export VK_LAYER_PATH=`"/opt/vulkan_sdk/etc/vulkan/explicit_layer.d`"`n    echo `"Vulkan SDK enabled: `$VULKAN_SDK`"`nfi`n`nCFG_OPTIONS=`"-`$link_type -prefix `$INSTALL_DIR -nomake examples -nomake tests -c++std c++20 -skip qtwebengine -opensource -confirm-license -qt-libpng -qt-libjpeg -qt-zlib -qt-pcre -openssl-linked -platform linux-clang -opengl desktop`"`n`n# 添加 Vulkan 支持（如果启用）`nif [ `"`$vulkan_choice`" != `"none`" ]; then`n    CFG_OPTIONS=`"`$CFG_OPTIONS -feature-vulkan`"`nelse`n    CFG_OPTIONS=`"`$CFG_OPTIONS -no-feature-vulkan`"`nfi`n`nif [ `"`$build_type`" = `"debug`" ]; then`n    CFG_OPTIONS=`"`$CFG_OPTIONS -debug`"`nelse`n    CFG_OPTIONS=`"`$CFG_OPTIONS -release`"`nfi`n`nif [ `"`$link_type`" = `"shared`" ] && [ `"`$separate_debug`" = `"true`" ]; then`n    CFG_OPTIONS=`"`$CFG_OPTIONS -force-debug-info -separate-debug-info`"`nfi`n`n# 设置额外的编译器和链接器标志`nexport CFLAGS=`"-fuse-ld=lld`"`nexport CXXFLAGS=`"-fuse-ld=lld -stdlib=libc++`"`nexport LDFLAGS=`"-fuse-ld=lld -stdlib=libc++`"`n`necho `"Configuring Qt with Clang/LLVM...`"`necho `"Using CC=`$CC, CXX=`$CXX`"`necho `"Configure options: `$CFG_OPTIONS`"`n`"`$SRC_QT/configure`" `$CFG_OPTIONS`n`necho `"Building Qt...`"`nPARALLEL_JOBS=`$(nproc)`nif [ `$PARALLEL_JOBS -gt 6 ]; then`n    PARALLEL_JOBS=6`nfi`n`ncmake --build . --parallel `$PARALLEL_JOBS`n`necho `"Installing Qt...`"`ncmake --install .`n`n# 保存配置摘要`nif [ -f config.summary ]; then`n    cp config.summary `"`$(pwd)/../qt-build-summary.txt`"`n    echo `"Configuration summary saved`"`nfi`n`ncd `"`$(pwd)/..`"`nrm -rf `"qt-everywhere-src-`$qt_version`"`n`necho `"Qt build with LLVM/Clang completed successfully!`""
          [System.IO.File]::WriteAllText("build-qt6-linux_x86_64_llvm.sh", $mainBuildScript.Replace("`r`n", "`n"), [System.Text.UTF8Encoding]::new($false))

          # 构建脚本调用器
          $buildScript = "#!/bin/bash`nset -e`n`nqt_version=`"${{ env.QT_VERSION }}`"`nllvm_version=`"${{ env.LLVM_VERSION }}`"`nbuild_type=`"${{ matrix.build_type }}`"`nlink_type=`"${{ matrix.link_type }}`"`nvulkan_choice=`"${{ env.VULKAN_CHOICE }}`"`n`nactual_build_type=`"`$build_type`"`nseparate_debug=`"false`"`nif [ `"`$build_type`" = `"release-sepdbg`" ]; then`n  actual_build_type=`"release`"`n  if [ `"`$link_type`" = `"shared`" ]; then`n    separate_debug=`"true`"`n  fi`nfi`n`nexport QT_VERSION=`"`$qt_version`"`nexport LLVM_VERSION=`"`$llvm_version`"`nexport BUILD_TYPE=`"`$actual_build_type`"`nexport LINK_TYPE=`"`$link_type`"`nexport SEPARATE_DEBUG=`"`$separate_debug`"`nexport VULKAN_CHOICE=`"`$vulkan_choice`"`n`nchmod +x ./build-qt6-linux_x86_64_llvm.sh`n./build-qt6-linux_x86_64_llvm.sh"
          [System.IO.File]::WriteAllText("build_qt.sh", $buildScript.Replace("`r`n", "`n"), [System.Text.UTF8Encoding]::new($false))
        shell: pwsh

      - name: Setup WSL2 environment and dependencies
        run: |
          wsl bash ./wsl_setup.sh

      - name: Setup Vulkan SDK
        if: ${{ env.VULKAN_CHOICE != 'none' }}
        run: |
          $vulkanScript = "#!/bin/bash`nset -e`necho `"Setting up Vulkan SDK for Linux...`"`n`nchoice=`"${{ env.VULKAN_CHOICE }}`"`nvulkan_root=`"/opt/vulkan_sdk`"`nsudo mkdir -p `"`$vulkan_root`"`n`ncase `"`$choice`" in`n  'runtime-1.4.321.0')`n    sdk_version=`"1.4.321.0`"`n    hdr_tag=`"vulkan-sdk-1.4.321.0`"`n    ;;`n  'runtime-1.3.290.0')`n    sdk_version=`"1.3.290.0`" `n    hdr_tag=`"v1.3.290`"`n    ;;`n  *)`n    echo `"Unsupported Vulkan SDK choice: `$choice`"`n    exit 1`n    ;;`nesac`n`nwork_dir=`"/tmp/vulkan_build`"`nrm -rf `"`$work_dir`"`nmkdir -p `"`$work_dir`"`ncd `"`$work_dir`"`n`n# 安装系统 Vulkan 开发包`nexport DEBIAN_FRONTEND=noninteractive`nsudo apt-get update`nsudo apt-get install -y --no-install-recommends \`n  libvulkan-dev \`n  vulkan-tools \`n  vulkan-validationlayers-dev \`n  spirv-tools \`n  wget \`n  unzip`n`n# 下载并安装官方 Vulkan SDK (包含额外的工具和头文件)`nsdk_url=`"https://sdk.lunarg.com/sdk/download/`$sdk_version/linux/vulkansdk-linux-x86_64-`$sdk_version.tar.gz`"`necho `"Downloading Vulkan SDK from: `$sdk_url`"`nwget -q `"`$sdk_url`" -O vulkan_sdk.tar.gz`n`nif [ -f vulkan_sdk.tar.gz ] && [ `$(stat -c%s vulkan_sdk.tar.gz) -gt 1000000 ]; then`n  echo `"Extracting Vulkan SDK...`"`n  sudo tar -xzf vulkan_sdk.tar.gz -C `"`$vulkan_root`" --strip-components=1`n  sudo chown -R root:root `"`$vulkan_root`"`nelse`n  echo `"SDK download failed, using system packages only`"`n  # 创建基本的 SDK 结构`n  sudo mkdir -p `"`$vulkan_root`"/{include,lib,bin}`n  `n  # 链接系统库`n  sudo ln -sf /usr/include/vulkan `"`$vulkan_root/include/`"`n  sudo ln -sf /usr/lib/x86_64-linux-gnu/libvulkan.so* `"`$vulkan_root/lib/`"`n  sudo ln -sf /usr/bin/vulkaninfo `"`$vulkan_root/bin/`" 2>/dev/null || true`nfi`n`n# 下载最新的 Vulkan-Headers (为了确保兼容性)`nhdr_url=`"https://github.com/KhronosGroup/Vulkan-Headers/archive/refs/tags/`$hdr_tag.zip`"`necho `"Downloading Vulkan headers: `$hdr_url`"`nwget -q `"`$hdr_url`" -O vulkan_headers.zip`n`nif [ -f vulkan_headers.zip ] && [ `$(stat -c%s vulkan_headers.zip) -gt 100000 ]; then`n  unzip -q vulkan_headers.zip`n  hdr_dir=`$(find . -maxdepth 1 -type d -name `"Vulkan-Headers-*`" | head -1)`n  if [ -n `"`$hdr_dir`" ] && [ -d `"`$hdr_dir/include/vulkan`" ]; then`n    sudo rm -rf `"`$vulkan_root/include/vulkan`"`n    sudo cp -r `"`$hdr_dir/include/vulkan`" `"`$vulkan_root/include/`"`n    sudo chown -R root:root `"`$vulkan_root/include/vulkan`"`n  fi`nfi`n`n# 设置环境变量文件`necho `"export VULKAN_SDK=`$vulkan_root`" | sudo tee /etc/environment.d/vulkan.conf`necho `"export VK_SDK_PATH=`$vulkan_root`" | sudo tee -a /etc/environment.d/vulkan.conf`necho `"export PATH=`$vulkan_root/bin:`\`$PATH`" | sudo tee -a /etc/environment.d/vulkan.conf`necho `"export LD_LIBRARY_PATH=`$vulkan_root/lib:`\`$LD_LIBRARY_PATH`" | sudo tee -a /etc/environment.d/vulkan.conf`necho `"export VK_LAYER_PATH=`$vulkan_root/etc/vulkan/explicit_layer.d`" | sudo tee -a /etc/environment.d/vulkan.conf`n`n# 验证安装`nif [ -f `"`$vulkan_root/include/vulkan/vulkan.h`" ]; then`n  echo `"Vulkan headers installed successfully`"`nelse`n  echo `"Warning: Vulkan headers not found`"`nfi`n`nif [ -f `"`$vulkan_root/lib/libvulkan.so`" ] || [ -f `"/usr/lib/x86_64-linux-gnu/libvulkan.so.1`" ]; then`n  echo `"Vulkan library found`"`nelse`n  echo `"Warning: Vulkan library not found`"`nfi`n`necho `"Vulkan SDK setup completed`"`necho `"SDK Path: `$vulkan_root`""
          [System.IO.File]::WriteAllText("vulkan_setup.sh", $vulkanScript.Replace("`r`n", "`n"), [System.Text.UTF8Encoding]::new($false))
          wsl bash ./vulkan_setup.sh

      - name: Download Qt source in WSL2
        run: |
          wsl bash ./download_qt.sh

      - name: Build Qt in WSL2
        run: |
          wsl bash ./build_qt.sh

      - name: Export Qt configure summary
        run: |
          $buildType = "${{ matrix.build_type }}"
          $linkType = "${{ matrix.link_type }}"
          
          # 查找配置摘要文件
          $summaryFile = "qt-build-summary.txt"
          if (wsl test -f $summaryFile) {
            $reportName = "qt-build-report_${linkType}_${buildType}.txt"
            wsl cp $summaryFile $reportName
            echo "REPORT_FILE=$reportName" >> $env:GITHUB_ENV
            Write-Host "Configuration summary exported as: $reportName"
          } else {
            Write-Host "Warning: Configuration summary file not found"
            # 创建基本的报告文件
            $reportName = "qt-build-report_${linkType}_${buildType}.txt"
            $basicReport = "Qt ${{ env.QT_VERSION }} Build Report`n=====================================`nBuild Type: $buildType`nLink Type: $linkType`nCompiler: LLVM/Clang ${{ env.LLVM_VERSION }}`nPlatform: Linux x86_64 (WSL2)`nVulkan Support: ${{ env.VULKAN_CHOICE }}`nBuild Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')`n`nNote: Detailed configuration summary was not available."
            [System.IO.File]::WriteAllText($reportName, $basicReport, [System.Text.UTF8Encoding]::new($false))
            echo "REPORT_FILE=$reportName" >> $env:GITHUB_ENV
          }
        shell: pwsh

      - name: Package binaries
        run: |
          $linkType = "${{ matrix.link_type }}"
          $buildType = "${{ matrix.build_type }}"
          $qtVersion = "${{ env.QT_VERSION }}"
          $llvmVersion = "${{ env.LLVM_VERSION }}"
          
          $buildTypeNormalized = switch ($buildType) {
            "release" { "release" }
            "debug" { "debug" }
            "release-sepdbg" { "relwithdebinfo" }
            default { $buildType.ToLower() }
          }
          
          $linkTypeNormalized = switch ($linkType) {
            "static" { "static" }
            "shared" { "shared" }
            default { $linkType.ToLower() }
          }
          
          $archiveName = "qt${qtVersion}-linux-x86_64-llvm${llvmVersion}-${linkTypeNormalized}_${buildTypeNormalized}.tar.xz"
          
          Write-Host "Creating archive: $archiveName"
          wsl tar -cJf $archiveName -C output .
          
          if (Test-Path $archiveName) {
            Write-Host "Archive created successfully"
            echo "ARCHIVE_NAME=$archiveName" >> $env:GITHUB_ENV
          } else {
            Write-Error "Failed to create archive"
            exit 1
          }
        shell: pwsh

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: qt${{ env.QT_VERSION }}-linux-x86_64-llvm${{ env.LLVM_VERSION }}-${{ matrix.link_type }}_${{ matrix.build_type == 'release' && 'release' || matrix.build_type == 'debug' && 'debug' || 'relwithdebinfo' }}
          path: ${{ env.ARCHIVE_NAME }}
          if-no-files-found: error

      - name: Upload configure summary
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.link_type }}_${{ matrix.build_type }}
          path: ${{ env.REPORT_FILE }}
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.create_release == 'true' }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Flatten artifacts
        run: |
          find artifacts -type f -name "*.tar.xz" -exec mv -t artifacts {} +
          find artifacts -type f -name "qt-build-report_*.txt" -exec mv -t artifacts {} + || true

      - name: Generate release tag
        id: release_tag
        run: |
          TAG_NAME="qt${{ env.QT_VERSION }}-linux-llvm${{ env.LLVM_VERSION }}-$(date +'%Y%m%d%H%M%S')"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Generate release notes
        run: |
          cat > release_notes.md << 'EOF'
          # Qt ${{ env.QT_VERSION }} Linux LLVM/Clang Build (WSL2)
          
          ## Build Information
          - **Qt Version**: ${{ env.QT_VERSION }}
          - **Compiler**: LLVM/Clang ${{ env.LLVM_VERSION }}
          - **Platform**: Linux x86_64
          - **C++ Standard Library**: libc++
          - **Linker**: lld
          - **Vulkan Support**: ${{ env.VULKAN_CHOICE }}
          - **Build Environment**: WSL2 Ubuntu 24.04
          - **Build Date**: $(date +'%Y-%m-%d %H:%M:%S UTC')
          
          ## Included Configurations
          ### Static Builds
          - \`static_release\`: Static linking, Release mode
          - \`static_relwithdebinfo\`: Static linking, Release mode with separate debug info
          
          ### Shared Builds
          - \`shared_release\`: Dynamic linking, Release mode
          - \`shared_debug\`: Dynamic linking, Debug mode
          - \`shared_relwithdebinfo\`: Dynamic linking, Release mode with separate debug info
          
          ## Vulkan Support
          This build includes Vulkan support if enabled during configuration:
          - **Vulkan SDK**: LunarG SDK + System packages
          - **Headers**: From Khronos Vulkan-Headers repository
          - **Libraries**: System libvulkan.so + SDK components
          - **Tools**: Validation layers, spirv-tools, vulkaninfo
          
          ## Installation
          1. Download the appropriate .tar.xz file
          2. Extract using: \`tar -xJf filename.tar.xz\`
          3. The Qt installation will be extracted with bin, lib, qml, etc. directories
          4. For Vulkan support, ensure Vulkan runtime is installed on target system
          
          ## Configure Summaries (from config.summary)
          EOF
          echo "" >> release_notes.md
          for f in artifacts/qt-build-report_*.txt; do
            [ -f "$f" ] || continue
            echo "" >> release_notes.md
            echo "---- $(basename "$f" .txt) ----" >> release_notes.md
            echo '```' >> release_notes.md
            sed -e 's/\r$//' "$f" >> release_notes.md
            echo '```' >> release_notes.md
          done
          echo "" >> release_notes.md
          echo "## Notes" >> release_notes.md
          echo "- Built with C++20 standard" >> release_notes.md
          echo "- Uses libc++ standard library instead of libstdc++" >> release_notes.md
          echo "- Uses lld linker for faster linking and smaller binaries" >> release_notes.md
          echo "- Skips QtWebEngine and examples/tests" >> release_notes.md
          echo "- Static builds do not include debug configurations" >> release_notes.md
          echo "- Requires libc++ runtime on target systems for shared builds" >> release_notes.md
          echo "- Built in WSL2 environment for consistent Linux ABI compatibility" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Artifacts" >> release_notes.md
          ls -1 artifacts/*.tar.xz >> release_notes.md || true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_tag.outputs.tag_name }}
          name: Qt ${{ env.QT_VERSION }} - Linux LLVM/Clang ${{ env.LLVM_VERSION }} (WSL2)
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: artifacts/**/*.tar.xz
          fail_on_unmatched_files: true

      - name: Clean up artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            qt${{ env.QT_VERSION }}-linux-x86_64-llvm${{ env.LLVM_VERSION }}-*
            report-*