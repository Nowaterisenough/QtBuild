name: build-qt6-linux_x86_64_llvm_matrix

on:
  workflow_dispatch:
    inputs:
      qt_version:
        description: 'QT Version'
        required: true
        default: '6.9.2'
      llvm_version:
        description: 'LLVM Version'
        required: true
        default: '18'
        type: choice
        options:
        - '15'
        - '16'
        - '17'
        - '18'
        - '19'
        - '20'
      vulkan_sdk:
        description: 'Vulkan support (none/runtime-*)'
        required: true
        type: choice
        options:
        - 'none'
        - 'runtime-1.4.321.0'
        - 'runtime-1.3.290.0'
        default: 'runtime-1.4.321.0'
      create_release:
        description: 'Create Release'
        required: true
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

env:
  QT_VERSION: ${{ github.event.inputs.qt_version || '6.9.2' }}
  LLVM_VERSION: ${{ github.event.inputs.llvm_version || '18' }}
  VULKAN_CHOICE: ${{ github.event.inputs.vulkan_sdk || 'runtime-1.4.321.0' }}
  ACTIONS_STEP_DEBUG: 'true'

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        link_type: [static, shared]
        build_type: [release, debug, release-sepdbg]
        exclude:
          - link_type: static
            build_type: debug
          - link_type: static
            build_type: release-sepdbg
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup WSL2 with Ubuntu 24.04
        uses: Vampire/setup-wsl@v3
        with:
          distribution: Ubuntu-24.04
          use-cache: 'false'
          set-as-default: 'true'

      - name: Extract Qt major.minor version
        id: qt_version
        run: |
          $version = "${{ env.QT_VERSION }}"
          $parts = $version.Split('.')
          $major_minor = "$($parts[0]).$($parts[1])"
          echo "major_minor=$major_minor" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Create scripts with proper line endings
        run: |
          # WSL 设置脚本
          $setupScript = @"
          #!/bin/bash
          set -e
          echo "Setting up WSL2 environment with LLVM/Clang..."

          export DEBIAN_FRONTEND=noninteractive
          
          # 添加 LLVM APT 源
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          echo "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-${{ env.LLVM_VERSION }} main" | sudo tee /etc/apt/sources.list.d/llvm.list
          
          sudo apt-get update
          
          # 安装 LLVM/Clang 和相关工具
          sudo apt-get install -y --no-install-recommends \
            clang-${{ env.LLVM_VERSION }} \
            clang++-${{ env.LLVM_VERSION }} \
            lld-${{ env.LLVM_VERSION }} \
            libc++-${{ env.LLVM_VERSION }}-dev \
            libc++abi-${{ env.LLVM_VERSION }}-dev \
            llvm-${{ env.LLVM_VERSION }}-dev \
            cmake \
            ninja-build \
            python3 \
            pkg-config \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libxcb1-dev \
            libxcb-util-dev \
            libxcb-image0-dev \
            libxcb-keysyms1-dev \
            libxcb-render0-dev \
            libxcb-render-util0-dev \
            libxcb-randr0-dev \
            libxcb-xtest0-dev \
            libxcb-xinerama0-dev \
            libxcb-shape0-dev \
            libxcb-sync-dev \
            libxcb-xfixes0-dev \
            libxcb-icccm4-dev \
            libxcb-shm0-dev \
            libxcb-cursor-dev \
            libfontconfig1-dev \
            libfreetype6-dev \
            libx11-dev \
            libxext-dev \
            libxfixes-dev \
            libxi-dev \
            libxrender-dev \
            libxrandr-dev \
            libxcursor-dev \
            libxinerama-dev \
            libxss-dev \
            libglib2.0-dev \
            libegl1-mesa-dev \
            libwayland-dev \
            libssl-dev \
            libasound2-dev \
            libpulse-dev \
            libnss3-dev \
            libxcomposite-dev \
            libxdamage-dev \
            libdrm-dev \
            wget \
            curl \
            xz-utils

          # 设置默认编译器
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${{ env.LLVM_VERSION }} 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${{ env.LLVM_VERSION }} 100
          sudo update-alternatives --install /usr/bin/lld lld /usr/bin/lld-${{ env.LLVM_VERSION }} 100
          
          # 验证安装
          clang-${{ env.LLVM_VERSION }} --version
          clang++-${{ env.LLVM_VERSION }} --version
          lld-${{ env.LLVM_VERSION }} --version

          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          "@
          [System.IO.File]::WriteAllText("wsl_setup.sh", $setupScript.Replace("`r`n", "`n"), [System.Text.UTF8Encoding]::new($false))

          # 下载脚本
          $downloadScript = @"
          #!/bin/bash
          set -e
          qt_version="${{ env.QT_VERSION }}"
          major_minor="${{ steps.qt_version.outputs.major_minor }}"
          source_url="https://download.qt.io/official_releases/qt/`$major_minor/`$qt_version/single/qt-everywhere-src-`$qt_version.tar.xz"

          echo "Downloading Qt source..."
          wget -O "qt-everywhere-src-`$qt_version.tar.xz" "`$source_url"
          "@
          [System.IO.File]::WriteAllText("download_qt.sh", $downloadScript.Replace("`r`n", "`n"), [System.Text.UTF8Encoding]::new($false))

          # 主构建脚本
          $mainBuildScript = @"
          #!/bin/bash
          set -e

          echo "Starting Qt Linux build script with LLVM/Clang in WSL2..."

          qt_version="`$QT_VERSION"
          llvm_version="`$LLVM_VERSION"
          build_type="`$BUILD_TYPE"
          link_type="`$LINK_TYPE"
          separate_debug="`$SEPARATE_DEBUG"
          vulkan_choice="`$VULKAN_CHOICE"

          echo "=== Build Parameters ==="
          echo "Qt Version: `$qt_version"
          echo "LLVM Version: `$llvm_version"
          echo "Build Type: `$build_type"
          echo "Link Type: `$link_type"
          echo "Separate Debug: `$separate_debug"
          echo "Vulkan Support: `$vulkan_choice"
          echo "========================"

          echo "Extracting Qt source..."
          if [ -f "qt-everywhere-src-`$qt_version.tar.xz" ]; then
              tar -xf qt-everywhere-src-`$qt_version.tar.xz
              rm qt-everywhere-src-`$qt_version.tar.xz
          else
              echo "Error: Qt source file not found"
              exit 1
          fi

          SRC_QT="`$(pwd)/qt-everywhere-src-`$qt_version"
          BUILD_DIR="`$(pwd)/build"
          INSTALL_DIR="`$(pwd)/output"

          mkdir -p "`$BUILD_DIR"
          mkdir -p "`$INSTALL_DIR"
          cd "`$BUILD_DIR"

          # 设置编译器环境变量
          export CC=clang-`${llvm_version}
          export CXX=clang++-`${llvm_version}
          export LLVM_INSTALL_DIR=/usr/lib/llvm-`${llvm_version}

          # 设置 Vulkan 环境变量（如果启用）
          if [ "`$vulkan_choice" != "none" ]; then
              export VULKAN_SDK="/opt/vulkan_sdk"
              export VK_SDK_PATH="/opt/vulkan_sdk"
              export PATH="/opt/vulkan_sdk/bin:`$PATH"
              export LD_LIBRARY_PATH="/opt/vulkan_sdk/lib:`$LD_LIBRARY_PATH"
              export VK_LAYER_PATH="/opt/vulkan_sdk/etc/vulkan/explicit_layer.d"
              echo "Vulkan SDK enabled: `$VULKAN_SDK"
          fi

          CFG_OPTIONS="-`$link_type -prefix `$INSTALL_DIR -nomake examples -nomake tests -c++std c++20 -skip qtwebengine -opensource -confirm-license -qt-libpng -qt-libjpeg -qt-zlib -qt-pcre -openssl-linked -platform linux-clang -opengl desktop"

          # 添加 Vulkan 支持（如果启用）
          if [ "`$vulkan_choice" != "none" ]; then
              CFG_OPTIONS="`$CFG_OPTIONS -feature-vulkan"
          else
              CFG_OPTIONS="`$CFG_OPTIONS -no-feature-vulkan"
          fi

          if [ "`$build_type" = "debug" ]; then
              CFG_OPTIONS="`$CFG_OPTIONS -debug"
          else
              CFG_OPTIONS="`$CFG_OPTIONS -release"
          fi

          if [ "`$link_type" = "shared" ] && [ "`$separate_debug" = "true" ]; then
              CFG_OPTIONS="`$CFG_OPTIONS -force-debug-info -separate-debug-info"
          fi

          # 设置额外的编译器和链接器标志
          export CFLAGS="-fuse-ld=lld"
          export CXXFLAGS="-fuse-ld=lld -stdlib=libc++"
          export LDFLAGS="-fuse-ld=lld -stdlib=libc++"

          echo "Configuring Qt with Clang/LLVM..."
          echo "Using CC=`$CC, CXX=`$CXX"
          echo "Configure options: `$CFG_OPTIONS"
          "`$SRC_QT/configure" `$CFG_OPTIONS

          echo "Building Qt..."
          PARALLEL_JOBS=`$(nproc)
          if [ `$PARALLEL_JOBS -gt 6 ]; then
              PARALLEL_JOBS=6
          fi

          cmake --build . --parallel `$PARALLEL_JOBS

          echo "Installing Qt..."
          cmake --install .

          # 保存配置摘要
          if [ -f config.summary ]; then
              cp config.summary "`$(pwd)/../qt-build-summary.txt"
              echo "Configuration summary saved"
          fi

          cd "`$(pwd)/.."
          rm -rf "qt-everywhere-src-`$qt_version"

          echo "Qt build with LLVM/Clang completed successfully!"
          "@
          [System.IO.File]::WriteAllText("build-qt6-linux_x86_64_llvm.sh", $mainBuildScript.Replace("`r`n", "`n"), [System.Text.UTF8Encoding]::new($false))

          # 构建脚本调用器
          $buildScript = @"
          #!/bin/bash
          set -e

          qt_version="${{ env.QT_VERSION }}"
          llvm_version="${{ env.LLVM_VERSION }}"
          build_type="${{ matrix.build_type }}"
          link_type="${{ matrix.link_type }}"
          vulkan_choice="${{ env.VULKAN_CHOICE }}"

          actual_build_type="`$build_type"
          separate_debug="false"
          if [ "`$build_type" = "release-sepdbg" ]; then
            actual_build_type="release"
            if [ "`$link_type" = "shared" ]; then
              separate_debug="true"
            fi
          fi

          export QT_VERSION="`$qt_version"
          export LLVM_VERSION="`$llvm_version"
          export BUILD_TYPE="`$actual_build_type"
          export LINK_TYPE="`$link_type"
          export SEPARATE_DEBUG="`$separate_debug"
          export VULKAN_CHOICE="`$vulkan_choice"

          chmod +x ./build-qt6-linux_x86_64_llvm.sh
          ./build-qt6-linux_x86_64_llvm.sh
          "@
          [System.IO.File]::WriteAllText("build_qt.sh", $buildScript.Replace("`r`n", "`n"), [System.Text.UTF8Encoding]::new($false))
        shell: pwsh

      - name: Setup WSL2 environment and dependencies
        run: |
          wsl bash ./wsl_setup.sh

      - name: Setup Vulkan SDK
        if: ${{ env.VULKAN_CHOICE != 'none' }}
        run: |
          $vulkanScript = @"
          #!/bin/bash
          set -e
          echo "Setting up Vulkan SDK for Linux..."
          
          choice="${{ env.VULKAN_CHOICE }}"
          vulkan_root="/opt/vulkan_sdk"
          sudo mkdir -p "`$vulkan_root"
          
          case "`$choice" in
            'runtime-1.4.321.0')
              sdk_version="1.4.321.0"
              hdr_tag="vulkan-sdk-1.4.321.0"
              ;;
            'runtime-1.3.290.0')
              sdk_version="1.3.290.0" 
              hdr_tag="v1.3.290"
              ;;
            *)
              echo "Unsupported Vulkan SDK choice: `$choice"
              exit 1
              ;;
          esac
          
          work_dir="/tmp/vulkan_build"
          rm -rf "`$work_dir"
          mkdir -p "`$work_dir"
          cd "`$work_dir"
          
          # 安装系统 Vulkan 开发包
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libvulkan-dev \
            vulkan-tools \
            vulkan-validationlayers-dev \
            spirv-tools \
            wget \
            unzip
          
          # 下载并安装官方 Vulkan SDK (包含额外的工具和头文件)
          sdk_url="https://sdk.lunarg.com/sdk/download/`$sdk_version/linux/vulkansdk-linux-x86_64-`$sdk_version.tar.gz"
          echo "Downloading Vulkan SDK from: `$sdk_url"
          wget -q "`$sdk_url" -O vulkan_sdk.tar.gz
          
          if [ -f vulkan_sdk.tar.gz ] && [ `$(stat -c%s vulkan_sdk.tar.gz) -gt 1000000 ]; then
            echo "Extracting Vulkan SDK..."
            sudo tar -xzf vulkan_sdk.tar.gz -C "`$vulkan_root" --strip-components=1
            sudo chown -R root:root "`$vulkan_root"
          else
            echo "SDK download failed, using system packages only"
            # 创建基本的 SDK 结构
            sudo mkdir -p "`$vulkan_root"/{include,lib,bin}
            
            # 链接系统库
            sudo ln -sf /usr/include/vulkan "`$vulkan_root/include/"
            sudo ln -sf /usr/lib/x86_64-linux-gnu/libvulkan.so* "`$vulkan_root/lib/"
            sudo ln -sf /usr/bin/vulkaninfo "`$vulkan_root/bin/" 2>/dev/null || true
          fi
          
          # 下载最新的 Vulkan-Headers (为了确保兼容性)
          hdr_url="https://github.com/KhronosGroup/Vulkan-Headers/archive/refs/tags/`$hdr_tag.zip"
          echo "Downloading Vulkan headers: `$hdr_url"
          wget -q "`$hdr_url" -O vulkan_headers.zip
          
          if [ -f vulkan_headers.zip ] && [ `$(stat -c%s vulkan_headers.zip) -gt 100000 ]; then
            unzip -q vulkan_headers.zip
            hdr_dir=`$(find . -maxdepth 1 -type d -name "Vulkan-Headers-*" | head -1)
            if [ -n "`$hdr_dir" ] && [ -d "`$hdr_dir/include/vulkan" ]; then
              sudo rm -rf "`$vulkan_root/include/vulkan"
              sudo cp -r "`$hdr_dir/include/vulkan" "`$vulkan_root/include/"
              sudo chown -R root:root "`$vulkan_root/include/vulkan"
            fi
          fi
          
          # 设置环境变量文件
          echo "export VULKAN_SDK=`$vulkan_root" | sudo tee /etc/environment.d/vulkan.conf
          echo "export VK_SDK_PATH=`$vulkan_root" | sudo tee -a /etc/environment.d/vulkan.conf
          echo "export PATH=`$vulkan_root/bin:`\`$PATH" | sudo tee -a /etc/environment.d/vulkan.conf
          echo "export LD_LIBRARY_PATH=`$vulkan_root/lib:`\`$LD_LIBRARY_PATH" | sudo tee -a /etc/environment.d/vulkan.conf
          echo "export VK_LAYER_PATH=`$vulkan_root/etc/vulkan/explicit_layer.d" | sudo tee -a /etc/environment.d/vulkan.conf
          
          # 验证安装
          if [ -f "`$vulkan_root/include/vulkan/vulkan.h" ]; then
            echo "Vulkan headers installed successfully"
          else
            echo "Warning: Vulkan headers not found"
          fi
          
          if [ -f "`$vulkan_root/lib/libvulkan.so" ] || [ -f "/usr/lib/x86_64-linux-gnu/libvulkan.so.1" ]; then
            echo "Vulkan library found"
          else
            echo "Warning: Vulkan library not found"
          fi
          
          echo "Vulkan SDK setup completed"
          echo "SDK Path: `$vulkan_root"
          "@
          [System.IO.File]::WriteAllText("vulkan_setup.sh", $vulkanScript.Replace("`r`n", "`n"), [System.Text.UTF8Encoding]::new($false))
          wsl bash ./vulkan_setup.sh

      - name: Download Qt source in WSL2
        run: |
          wsl bash ./download_qt.sh

      - name: Build Qt in WSL2
        run: |
          wsl bash ./build_qt.sh

      - name: Export Qt configure summary
        run: |
          $buildType = "${{ matrix.build_type }}"
          $linkType = "${{ matrix.link_type }}"
          
          # 查找配置摘要文件
          $summaryFile = "qt-build-summary.txt"
          if (wsl test -f $summaryFile) {
            $reportName = "qt-build-report_${linkType}_${buildType}.txt"
            wsl cp $summaryFile $reportName
            echo "REPORT_FILE=$reportName" >> $env:GITHUB_ENV
            Write-Host "Configuration summary exported as: $reportName"
          } else {
            Write-Host "Warning: Configuration summary file not found"
            # 创建基本的报告文件
            $reportName = "qt-build-report_${linkType}_${buildType}.txt"
            $basicReport = @"
Qt ${{ env.QT_VERSION }} Build Report
=====================================
Build Type: $buildType
Link Type: $linkType
Compiler: LLVM/Clang ${{ env.LLVM_VERSION }}
Platform: Linux x86_64 (WSL2)
Vulkan Support: ${{ env.VULKAN_CHOICE }}
Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')

Note: Detailed configuration summary was not available.
"@
            [System.IO.File]::WriteAllText($reportName, $basicReport, [System.Text.UTF8Encoding]::new($false))
            echo "REPORT_FILE=$reportName" >> $env:GITHUB_ENV
          }
        shell: pwsh

      - name: Package binaries
        run: |
          $linkType = "${{ matrix.link_type }}"
          $buildType = "${{ matrix.build_type }}"
          $qtVersion = "${{ env.QT_VERSION }}"
          $llvmVersion = "${{ env.LLVM_VERSION }}"
          
          $buildTypeNormalized = switch ($buildType) {
            "release" { "release" }
            "debug" { "debug" }
            "release-sepdbg" { "relwithdebinfo" }
            default { $buildType.ToLower() }
          }
          
          $linkTypeNormalized = switch ($linkType) {
            "static" { "static" }
            "shared" { "shared" }
            default { $linkType.ToLower() }
          }
          
          $archiveName = "qt${qtVersion}-linux-x86_64-llvm${llvmVersion}-${linkTypeNormalized}_${buildTypeNormalized}.tar.xz"
          
          Write-Host "Creating archive: $archiveName"
          wsl tar -cJf $archiveName -C output .
          
          if (Test-Path $archiveName) {
            Write-Host "Archive created successfully"
            echo "ARCHIVE_NAME=$archiveName" >> $env:GITHUB_ENV
          } else {
            Write-Error "Failed to create archive"
            exit 1
          }
        shell: pwsh

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: qt${{ env.QT_VERSION }}-linux-x86_64-llvm${{ env.LLVM_VERSION }}-${{ matrix.link_type }}_${{ matrix.build_type == 'release' && 'release' || matrix.build_type == 'debug' && 'debug' || 'relwithdebinfo' }}
          path: ${{ env.ARCHIVE_NAME }}
          if-no-files-found: error

      - name: Upload configure summary
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.link_type }}_${{ matrix.build_type }}
          path: ${{ env.REPORT_FILE }}
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.create_release == 'true' }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Flatten artifacts
        run: |
          find artifacts -type f -name "*.tar.xz" -exec mv -t artifacts {} +
          find artifacts -type f -name "qt-build-report_*.txt" -exec mv -t artifacts {} + || true

      - name: Generate release tag
        id: release_tag
        run: |
          TAG_NAME="qt${{ env.QT_VERSION }}-linux-llvm${{ env.LLVM_VERSION }}-$(date +'%Y%m%d%H%M%S')"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Generate release notes
        run: |
          cat > release_notes.md << 'EOF'
          # Qt ${{ env.QT_VERSION }} Linux LLVM/Clang Build (WSL2)
          
          ## Build Information
          - **Qt Version**: ${{ env.QT_VERSION }}
          - **Compiler**: LLVM/Clang ${{ env.LLVM_VERSION }}
          - **Platform**: Linux x86_64
          - **C++ Standard Library**: libc++
          - **Linker**: lld
          - **Vulkan Support**: ${{ env.VULKAN_CHOICE }}
          - **Build Environment**: WSL2 Ubuntu 24.04
          - **Build Date**: $(date +'%Y-%m-%d %H:%M:%S UTC')
          
          ## Included Configurations
          ### Static Builds
          - \`static_release\`: Static linking, Release mode
          - \`static_relwithdebinfo\`: Static linking, Release mode with separate debug info
          
          ### Shared Builds
          - \`shared_release\`: Dynamic linking, Release mode
          - \`shared_debug\`: Dynamic linking, Debug mode
          - \`shared_relwithdebinfo\`: Dynamic linking, Release mode with separate debug info
          
          ## Vulkan Support
          This build includes Vulkan support if enabled during configuration:
          - **Vulkan SDK**: LunarG SDK + System packages
          - **Headers**: From Khronos Vulkan-Headers repository
          - **Libraries**: System libvulkan.so + SDK components
          - **Tools**: Validation layers, spirv-tools, vulkaninfo
          
          ## Installation
          1. Download the appropriate .tar.xz file
          2. Extract using: \`tar -xJf filename.tar.xz\`
          3. The Qt installation will be extracted with bin, lib, qml, etc. directories
          4. For Vulkan support, ensure Vulkan runtime is installed on target system
          
          ## Configure Summaries (from config.summary)
          EOF
          echo "" >> release_notes.md
          for f in artifacts/qt-build-report_*.txt; do
            [ -f "$f" ] || continue
            echo "" >> release_notes.md
            echo "---- $(basename "$f" .txt) ----" >> release_notes.md
            echo '```' >> release_notes.md
            sed -e 's/\r$//' "$f" >> release_notes.md
            echo '```' >> release_notes.md
          done
          echo "" >> release_notes.md
          echo "## Notes" >> release_notes.md
          echo "- Built with C++20 standard" >> release_notes.md
          echo "- Uses libc++ standard library instead of libstdc++" >> release_notes.md
          echo "- Uses lld linker for faster linking and smaller binaries" >> release_notes.md
          echo "- Skips QtWebEngine and examples/tests" >> release_notes.md
          echo "- Static builds do not include debug configurations" >> release_notes.md
          echo "- Requires libc++ runtime on target systems for shared builds" >> release_notes.md
          echo "- Built in WSL2 environment for consistent Linux ABI compatibility" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Artifacts" >> release_notes.md
          ls -1 artifacts/*.tar.xz >> release_notes.md || true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_tag.outputs.tag_name }}
          name: Qt ${{ env.QT_VERSION }} - Linux LLVM/Clang ${{ env.LLVM_VERSION }} (WSL2)
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: artifacts/**/*.tar.xz
          fail_on_unmatched_files: true

      - name: Clean up artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            qt${{ env.QT_VERSION }}-linux-x86_64-llvm${{ env.LLVM_VERSION }}-*
            report-*