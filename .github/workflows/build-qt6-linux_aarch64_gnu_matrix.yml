name: build-qt6-linux_aarch64_gnu_matrix

on:
  workflow_dispatch:
    inputs:
      qt_version:
        description: 'Qt Version'
        required: true
        default: '6.9.1'
      gcc_version:
        description: 'GCC Version'
        required: true
        default: '14.3.rel1'
        type: choice
        options:
        - '14.3.rel1'
        - '13.2.rel1'
        - '12.3.rel1'
      host_qt_url:
        description: 'Host Qt URL'
        required: false
        default: 'https://github.com/yuanpeirong/buildQt/releases/download/Qt6.9.1_rev0/Qt_6.9.1-static-Release_mingw1510_64_UCRT.7z'
      test_mode:
        description: 'Test Mode (only build qtbase)'
        required: true
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      create_release:
        description: 'Create Release'
        required: true
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

env:
  QT_VERSION: ${{ github.event.inputs.qt_version || '6.9.1' }}
  GCC_VERSION: ${{ github.event.inputs.gcc_version || '14.3.rel1' }}
  HOST_QT_URL: ${{ github.event.inputs.host_qt_url || 'https://github.com/yuanpeirong/buildQt/releases/download/Qt6.9.1_rev0/Qt_6.9.1-static-Release_mingw1510_64_UCRT.7z' }}
  TEST_MODE: ${{ github.event.inputs.test_mode || 'false' }}

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        link_type: [static, shared]
        build_type: [release, debug, release-sepdbg]
        exclude:
          # static 构建跳过 release-sepdbg
          - link_type: static
            build_type: release-sepdbg
          # static 构建跳过 debug（太大）
          - link_type: static
            build_type: debug
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          architecture: 'x64'

      - name: Extract Qt major.minor version
        id: qt_version
        run: |
          $version = "${{ env.QT_VERSION }}"
          $parts = $version.Split('.')
          $major_minor = "$($parts[0]).$($parts[1])"
          echo "major_minor=$major_minor" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Setup ARM GNU Toolchain
        run: |
          cd ..
          Write-Host "Downloading ARM GNU Toolchain ${{ env.GCC_VERSION }}..."
          
          # 根据版本选择下载URL
          $gccVersion = "${{ env.GCC_VERSION }}"
          $downloadUrl = switch ($gccVersion) {
            "14.3.rel1" { "https://developer.arm.com/-/media/Files/downloads/gnu/14.3.rel1/binrel/arm-gnu-toolchain-14.3.rel1-mingw-w64-x86_64-aarch64-none-linux-gnu.zip" }
            "13.2.rel1" { "https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-mingw-w64-x86_64-aarch64-none-linux-gnu.zip" }
            "12.3.rel1" { "https://developer.arm.com/-/media/Files/downloads/gnu/12.3.rel1/binrel/arm-gnu-toolchain-12.3.rel1-mingw-w64-x86_64-aarch64-none-linux-gnu.zip" }
            default { "https://developer.arm.com/-/media/Files/downloads/gnu/14.3.rel1/binrel/arm-gnu-toolchain-14.3.rel1-mingw-w64-x86_64-aarch64-none-linux-gnu.zip" }
          }
          
          Write-Host "Downloading from: $downloadUrl"
          curl -L -o toolchain.zip $downloadUrl
          
          # 创建临时解压目录
          $tempExtractDir = "temp_toolchain_extract"
          if (Test-Path $tempExtractDir) {
            Remove-Item $tempExtractDir -Recurse -Force
          }
          New-Item -ItemType Directory -Path $tempExtractDir -Force | Out-Null
          
          Write-Host "Extracting ARM GNU toolchain to temporary directory..."
          7z x toolchain.zip -o"$tempExtractDir"
          
          # 列出解压后的内容以便调试
          Write-Host "Contents of extracted directory:"
          Get-ChildItem -Path $tempExtractDir | ForEach-Object {
            Write-Host "  - $($_.Name) [$(if($_.PSIsContainer){'Directory'}else{'File'})]"
          }
          
          # 查找工具链目录（可能有不同的命名模式）
          $toolchainDir = $null
          
          # 首先查找以 arm-gnu-toolchain 开头的目录
          $toolchainDir = Get-ChildItem -Path $tempExtractDir -Directory -Filter "arm-gnu-toolchain-*" | Select-Object -First 1
          
          # 如果没找到，查找包含 aarch64 的目录
          if (-not $toolchainDir) {
            $toolchainDir = Get-ChildItem -Path $tempExtractDir -Directory | Where-Object { $_.Name -like "*aarch64*" } | Select-Object -First 1
          }
          
          # 如果还是没找到，检查是否直接解压到了临时目录
          if (-not $toolchainDir) {
            # 检查临时目录中是否有 bin 目录（工具链的典型结构）
            if (Test-Path "$tempExtractDir\bin") {
              Write-Host "Toolchain appears to be extracted directly to temp directory"
              # 直接使用临时目录作为源
              Move-Item $tempExtractDir "arm-gnu-toolchain"
              Write-Host "Toolchain moved to: arm-gnu-toolchain"
            } else {
              # 如果只有一个子目录，使用它
              $subDirs = Get-ChildItem -Path $tempExtractDir -Directory
              if ($subDirs.Count -eq 1) {
                $toolchainDir = $subDirs[0]
                Write-Host "Found single directory: $($toolchainDir.Name)"
              } else {
                Write-Host "Error: Unable to identify toolchain directory structure"
                Write-Host "Found directories:"
                $subDirs | ForEach-Object { Write-Host "  - $($_.Name)" }
                exit 1
              }
            }
          }
          
          # 如果找到了工具链目录，移动它
          if ($toolchainDir) {
            Write-Host "Moving $($toolchainDir.FullName) to arm-gnu-toolchain"
            Move-Item $toolchainDir.FullName "arm-gnu-toolchain"
            Write-Host "Toolchain extracted to: arm-gnu-toolchain"
            # 清理临时目录
            if (Test-Path $tempExtractDir) {
              Remove-Item $tempExtractDir -Recurse -Force
            }
          }
          
          # 验证最终的工具链目录
          if (Test-Path "arm-gnu-toolchain\bin") {
            Write-Host "Toolchain setup completed successfully"
            Write-Host "Toolchain bin directory contents:"
            Get-ChildItem "arm-gnu-toolchain\bin" -Filter "*.exe" | Select-Object -First 5 | ForEach-Object {
              Write-Host "  - $($_.Name)"
            }
          } else {
            Write-Host "Error: Toolchain bin directory not found"
            exit 1
          }
          
          # 清理下载的zip文件
          Remove-Item toolchain.zip -ErrorAction SilentlyContinue
        shell: pwsh

      - name: Setup build tools
        run: |
          cd ..
          
          # Setup Ninja
          Write-Host "Setting up Ninja..."
          mkdir ninja
          curl -L -o ninja.zip https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-win.zip
          7z x ninja.zip -oninja
          
          # Setup Protobuf
          Write-Host "Setting up Protobuf..."
          curl -L -o protoc-win64.zip https://github.com/protocolbuffers/protobuf/releases/download/v30.2/protoc-30.2-win64.zip
          7z x protoc-win64.zip -oprotoc
        shell: pwsh

      - name: Download Host Qt
        run: |
          cd ..
          Write-Host "Downloading Host Qt..."
          New-Item -ItemType Directory -Force -Path "Qt/${{ env.QT_VERSION }}-host"
          cd "Qt/${{ env.QT_VERSION }}-host"
          
          curl -L -o host-qt.7z "${{ env.HOST_QT_URL }}"
          7z x host-qt.7z
          
          # 查找并移动Qt目录内容
          $qtDirs = Get-ChildItem -Directory
          if ($qtDirs.Count -gt 0) {
            $firstDir = $qtDirs[0]
            Get-ChildItem "$($firstDir.Name)\*" -Force | Move-Item -Destination . -Force
            Remove-Item $firstDir.Name -Recurse -Force
          }
          Remove-Item host-qt.7z -ErrorAction SilentlyContinue
          
          Write-Host "Host Qt setup completed."
        shell: pwsh

      - name: Prepare directories and source
        run: |
          cd ..
          mkdir Qt -ErrorAction SilentlyContinue
          cd Qt
          mkdir "${{ env.QT_VERSION }}" -ErrorAction SilentlyContinue
          mkdir "${{ env.QT_VERSION }}-${{ matrix.link_type }}" -ErrorAction SilentlyContinue
          
          Write-Host "Downloading Qt source code..."
          curl -L -o qt-everywhere-src.zip "https://download.qt.io/official_releases/qt/${{ steps.qt_version.outputs.major_minor }}/${{ env.QT_VERSION }}/single/qt-everywhere-src-${{ env.QT_VERSION }}.zip"
          7z x qt-everywhere-src.zip -o"${{ env.QT_VERSION }}"
        shell: pwsh

      - name: Run cross-compile build
        shell: cmd
        run: |
          setlocal enableextensions enabledelayedexpansion

          set QT_VERSION=${{ env.QT_VERSION }}
          set GCC_VERSION=${{ env.GCC_VERSION }}
          set BUILD_TYPE=${{ matrix.build_type }}
          set LINK_TYPE=${{ matrix.link_type }}
          set TEST_MODE=${{ env.TEST_MODE }}

          if "%BUILD_TYPE%"=="release-sepdbg" (
            set BUILD_TYPE=release
            if "%LINK_TYPE%"=="shared" (
              set SEPARATE_DEBUG=true
            ) else (
              echo "Error: static release-sepdbg should be excluded"
              exit /b 1
            )
          ) else (
            set SEPARATE_DEBUG=false
          )

          call D:\a\QtBuild\QtBuild\Qt6Build\build-qt6-linux_aarch64_gnu.cmd !QT_VERSION! !GCC_VERSION! !BUILD_TYPE! !LINK_TYPE! !SEPARATE_DEBUG! !TEST_MODE!

      - name: Package ARM64 cross-compile artifacts
        run: |
          $linkType = "${{ matrix.link_type }}"
          $buildType = "${{ matrix.build_type }}"
          $qtVersion = "${{ env.QT_VERSION }}"
          $gccVersion = "${{ env.GCC_VERSION }}"
          
          # 规范化构建类型名称
          $buildTypeNormalized = switch ($buildType) {
            "release" { "release" }
            "debug" { "debug" }
            "release-sepdbg" { "relwithdebinfo" }
            default { $buildType.ToLower() }
          }
          
          # 规范化链接类型名称
          $linkTypeNormalized = switch ($linkType) {
            "static" { "static" }
            "shared" { "shared" }
            default { $linkType.ToLower() }
          }
          
          # 命名格式：qt版本-平台架构编译器-链接类型_构建类型
          $archiveName = "qt${qtVersion}-linux-aarch64-gnu${gccVersion}-${linkTypeNormalized}_${buildTypeNormalized}.7z"
          $sourcePath = "D:\a\QtBuild\Qt\$qtVersion-$linkType"
          
          # 检查源目录是否存在
          if (Test-Path $sourcePath) {
            # 创建临时目录用于重组目录结构
            $tempDir = "D:\a\QtBuild\temp_package"
            $finalDirName = "qt${qtVersion}-linux-aarch64-gnu${gccVersion}-${linkTypeNormalized}_${buildTypeNormalized}"
            $finalPath = Join-Path $tempDir $finalDirName
            
            # 清理并创建临时目录
            if (Test-Path $tempDir) {
              Remove-Item $tempDir -Recurse -Force
            }
            New-Item -ItemType Directory -Path $finalPath -Force | Out-Null
            
            # 获取编译器目录
            $compilerDirs = Get-ChildItem -Path $sourcePath -Directory | Where-Object { $_.Name -like "aarch64_none_linux_gnu_*" }
            if ($compilerDirs.Count -eq 0) {
              Write-Host "Error: No ARM GNU compiler directory found in $sourcePath"
              Get-ChildItem -Path $sourcePath
              exit 1
            }
            
            $compilerDir = $compilerDirs[0].FullName
            Write-Host "Found compiler directory: ${compilerDir}"
            
            # 复制Qt安装内容
            Copy-Item -Path "$compilerDir\*" -Destination $finalPath -Recurse -Force
            
            # 创建压缩包
            Set-Location $tempDir
            $workspaceDir = "${{ github.workspace }}"
            $archiveFullPath = Join-Path $workspaceDir $archiveName
            
            7z a "$archiveFullPath" $finalDirName -mx=9
            
            echo "Archive created: $archiveFullPath"
            
            # 验证压缩包
            if (Test-Path $archiveFullPath) {
              echo "Archive verified at: $archiveFullPath"
              $fileInfo = Get-Item $archiveFullPath
              echo "File size: $($fileInfo.Length) bytes"
            } else {
              echo "Error: Archive file not found at $archiveFullPath"
              exit 1
            }
            
            # 输出到环境变量
            echo "ARCHIVE_NAME=$archiveName" >> $env:GITHUB_ENV
            echo "ARCHIVE_PATH=$archiveFullPath" >> $env:GITHUB_ENV
            
            # 清理临时目录
            Set-Location "${{ github.workspace }}"
            Remove-Item $tempDir -Recurse -Force
          } else {
            echo "Error: Source path does not exist: $sourcePath"
            exit 1
          }
        shell: pwsh

      - uses: actions/upload-artifact@v4
        with:
          name: qt${{ env.QT_VERSION }}-linux-aarch64-gnu${{ env.GCC_VERSION }}-${{ matrix.link_type }}_${{ matrix.build_type == 'release' && 'release' || matrix.build_type == 'debug' && 'debug' || 'relwithdebinfo' }}
          path: ${{ env.ARCHIVE_NAME }}
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.create_release == 'true' }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List downloaded artifacts
        run: |
          echo "Listing artifacts directory structure:"
          find artifacts -type f -name "*.7z" -ls

      - name: Move artifacts to root level
        run: |
          echo "Moving .7z files to artifacts root..."
          find artifacts -type f -name "*.7z" -exec mv {} artifacts/ \;
          echo "Files in artifacts directory after move:"
          ls -la artifacts/*.7z

      - name: Generate release tag
        id: release_tag
        run: |
          TAG_NAME="qt${{ env.QT_VERSION }}-linux-aarch64-gnu${{ env.GCC_VERSION }}-$(date +'%Y%m%d%H%M%S')"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Tag name: $TAG_NAME"

      - name: Generate release notes
        id: release_notes
        run: |
          cat << EOF > release_notes.md
          # Qt ${{ env.QT_VERSION }} Linux ARM64 Cross-Compilation Build
          
          ## Build Information
          - **Qt Version**: ${{ env.QT_VERSION }}
          - **Target Platform**: Linux ARM64 (aarch64)
          - **Compiler**: ARM GNU Toolchain ${{ env.GCC_VERSION }}
          - **Build Date**: $(date +'%Y-%m-%d %H:%M:%S UTC')
          - **Build Runner**: GitHub Actions (windows-latest)
          - **Cross-compilation**: Windows → Linux ARM64
          
          ## Included Features
          - **Core Qt Modules**: QtCore, QtGui, QtWidgets, QtNetwork, etc.
          - **Database Driver**: SQLite
          - **C++ Standard**: C++20
          
          ## Included Configurations
          This release includes the following build configurations:
          
          ### Static Build
          - \`static_release\`: Static linking, Release mode
          
          ### Shared Builds
          - \`shared_release\`: Dynamic linking, Release mode
          - \`shared_debug\`: Dynamic linking, Debug mode
          - \`shared_relwithdebinfo\`: Dynamic linking, Release mode with separate debug info
          
          ## File Naming Convention
          Files follow the pattern: \`qt{version}-linux-aarch64-gnu{gcc_version}-{link_type}_{build_type}.7z\`
          
          Where:
          - \`{version}\`: Qt version (e.g., 6.9.1)
          - \`{gcc_version}\`: GCC version (e.g., 14.3.rel1)
          - \`{link_type}\`: static or shared
          - \`{build_type}\`: release, debug, or relwithdebinfo
          
          ## Installation
          1. Download the appropriate .7z file for your ARM64 Linux system
          2. Extract using 7-Zip or compatible software
          3. Deploy to your ARM64 Linux target system
          4. The Qt installation will be in the extracted folder
          
          ## Notes
          - This is a cross-compiled build for ARM64 Linux targets
          - Binaries cannot run on x86_64 systems
          - No QML/Quick support in this build (modules depending on qtdeclarative are excluded)
          - Static debug builds are excluded due to size constraints
          - All builds skip QtWebEngine and examples/tests
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_tag.outputs.tag_name }}
          name: Qt ${{ env.QT_VERSION }} - Linux ARM64 GNU ${{ env.GCC_VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: artifacts/*.7z
          fail_on_unmatched_files: true
          generate_release_notes: false

      - name: Clean up artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: qt${{ env.QT_VERSION }}-linux-aarch64-gnu${{ env.GCC_VERSION }}-*