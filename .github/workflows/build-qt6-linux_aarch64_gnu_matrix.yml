name: build-qt6-linux_aarch64_gnu_matrix

on:
  workflow_dispatch:
    inputs:
      qt_version:
        description: 'Qt版本'
        required: true
        default: '6.9.1'
      gcc_version:
        description: 'GCC版本'
        required: true
        default: '14.3.rel1'
        type: choice
        options:
        - '14.3.rel1'
        - '13.2.rel1'
        - '12.3.rel1'
      host_qt_url:
        description: 'Host Qt下载地址'
        required: false
        default: 'https://github.com/yuanpeirong/buildQt/releases/download/Qt6.9.1_rev0/Qt_6.9.1-static-Release_mingw1510_64_UCRT.7z'

env:
  QT_VERSION: ${{ github.event.inputs.qt_version || '6.9.1' }}
  GCC_VERSION: ${{ github.event.inputs.gcc_version || '14.3.rel1' }}
  HOST_QT_URL: ${{ github.event.inputs.host_qt_url || 'https://github.com/yuanpeirong/buildQt/releases/download/Qt6.9.1_rev0/Qt_6.9.1-static-Release_mingw1510_64_UCRT.7z' }}

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        link_type: [static, shared]
        build_type: [release, debug, release-sepdbg]
        exclude:
          # 静态构建不支持debug版本（太大）
          - link_type: static
            build_type: debug
    steps:
      - name: 检出代码仓库
        uses: actions/checkout@v4

      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          architecture: 'x64'

      - name: 提取Qt主次版本号
        id: qt_version
        run: |
          $version = "${{ env.QT_VERSION }}"
          $parts = $version.Split('.')
          $major_minor = "$($parts[0]).$($parts[1])"
          echo "major_minor=$major_minor" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: 设置ARM GNU工具链
        run: |
          cd ..
          Write-Host "Downloading ARM GNU Toolchain ${{ env.GCC_VERSION }}..."
          
          # 根据版本选择下载URL
          $gccVersion = "${{ env.GCC_VERSION }}"
          $downloadUrl = switch ($gccVersion) {
            "14.3.rel1" { "https://developer.arm.com/-/media/Files/downloads/gnu/14.3.rel1/binrel/arm-gnu-toolchain-14.3.rel1-mingw-w64-x86_64-aarch64-none-linux-gnu.zip" }
            "13.2.rel1" { "https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-mingw-w64-x86_64-aarch64-none-linux-gnu.zip" }
            "12.3.rel1" { "https://developer.arm.com/-/media/Files/downloads/gnu/12.3.rel1/binrel/arm-gnu-toolchain-12.3.rel1-mingw-w64-x86_64-aarch64-none-linux-gnu.zip" }
            default { "https://developer.arm.com/-/media/Files/downloads/gnu/14.3.rel1/binrel/arm-gnu-toolchain-14.3.rel1-mingw-w64-x86_64-aarch64-none-linux-gnu.zip" }
          }
          
          Write-Host "Downloading from: $downloadUrl"
          curl -L -o toolchain.zip $downloadUrl
          
          Write-Host "Extracting ARM GNU toolchain..."
          7z x toolchain.zip
          
          # 查找实际解压出来的目录
          Write-Host "Looking for extracted directories..."
          $extractedDirs = Get-ChildItem -Directory | Where-Object { $_.Name -like "*arm-gnu-toolchain*" -or $_.Name -like "*aarch64*" }
          Write-Host "Found directories:"
          foreach ($dir in $extractedDirs) {
            Write-Host "  - $($dir.Name)"
          }
          
          if ($extractedDirs.Count -eq 0) {
            Write-Host "No toolchain directory found. Listing all directories:"
            Get-ChildItem -Directory | ForEach-Object { Write-Host "  - $($_.Name)" }
            exit 1
          }
          
          # 使用第一个找到的目录
          $sourceDir = $extractedDirs[0].Name
          Write-Host "Using directory: $sourceDir"
          
          # 重命名为标准名称
          Rename-Item $sourceDir "aarch64-none-linux-gnu"
          Write-Host "Renamed toolchain directory to aarch64-none-linux-gnu"
          
          # 验证工具链
          $gccPath = "aarch64-none-linux-gnu\bin\aarch64-none-linux-gnu-gcc.exe"
          if (Test-Path $gccPath) {
            Write-Host "ARM GNU toolchain setup successful"
            & $gccPath --version
          } else {
            Write-Host "Error: GCC not found at $gccPath"
            Write-Host "Checking bin directory contents:"
            if (Test-Path "aarch64-none-linux-gnu\bin") {
              Get-ChildItem "aarch64-none-linux-gnu\bin" -Name "*.exe" | ForEach-Object { Write-Host "  - $_" }
            } else {
              Write-Host "Bin directory not found"
            }
            exit 1
          }
        shell: pwsh

      - name: 设置构建工具
        run: |
          cd ..
          
          # 设置Ninja
          Write-Host "Setting up Ninja..."
          mkdir ninja
          curl -L -o ninja.zip https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-win.zip
          7z x ninja.zip -oninja
          
          # 设置Protobuf (QtGRPC需要)
          Write-Host "Setting up Protobuf..."
          curl -L -o protoc-win64.zip https://github.com/protocolbuffers/protobuf/releases/download/v30.2/protoc-30.2-win64.zip
          7z x protoc-win64.zip -oprotoc
        shell: pwsh

      - name: 下载Host Qt
        run: |
          cd ..
          Write-Host "Downloading Host Qt..."
          New-Item -ItemType Directory -Force -Path "Qt/${{ env.QT_VERSION }}-host"
          cd "Qt/${{ env.QT_VERSION }}-host"
          
          curl -L -o host-qt.7z "${{ env.HOST_QT_URL }}"
          7z x host-qt.7z
          
          # 移动到正确的目录结构
          if (Test-Path "${{ env.QT_VERSION }}-static") {
            $subDir = Get-ChildItem "${{ env.QT_VERSION }}-static" | Select-Object -First 1
            if ($subDir) {
              Get-ChildItem "${{ env.QT_VERSION }}-static\$($subDir.Name)\*" | Move-Item -Destination . -Force
              Remove-Item -Path "${{ env.QT_VERSION }}-static" -Recurse -Force
            }
          }
          Remove-Item host-qt.7z -ErrorAction SilentlyContinue
          
          Write-Host "Host Qt setup completed."
        shell: pwsh

      - name: 准备目录和源码
        run: |
          cd ..
          mkdir Qt -ErrorAction SilentlyContinue
          cd Qt
          mkdir "${{ env.QT_VERSION }}" -ErrorAction SilentlyContinue
          mkdir "${{ env.QT_VERSION }}-${{ matrix.link_type }}" -ErrorAction SilentlyContinue
          
          Write-Host "Downloading Qt source code..."
          curl -L -o qt-everywhere-src.zip "https://download.qt.io/official_releases/qt/${{ steps.qt_version.outputs.major_minor }}/${{ env.QT_VERSION }}/single/qt-everywhere-src-${{ env.QT_VERSION }}.zip"
          7z x qt-everywhere-src.zip -o"${{ env.QT_VERSION }}"
        shell: pwsh

      - name: 执行交叉编译构建
        shell: cmd
        run: |
          setlocal enableextensions enabledelayedexpansion

          set QT_VERSION=${{ env.QT_VERSION }}
          set GCC_VERSION=${{ env.GCC_VERSION }}
          set BUILD_TYPE=${{ matrix.build_type }}
          set LINK_TYPE=${{ matrix.link_type }}

          if "%BUILD_TYPE%"=="release-sepdbg" (
            set BUILD_TYPE=release
            if "%LINK_TYPE%"=="shared" (
              set SEPARATE_DEBUG=true
            ) else (
              set SEPARATE_DEBUG=false
            )
          ) else if "%BUILD_TYPE%"=="debug" (
            set BUILD_TYPE=debug
            set SEPARATE_DEBUG=false
          ) else (
            set SEPARATE_DEBUG=false
          )

          call D:\a\QtBuild\QtBuild\Qt6Build\build-qt6-linux_aarch64_gnu.cmd !QT_VERSION! !GCC_VERSION! !BUILD_TYPE! !LINK_TYPE! !SEPARATE_DEBUG!

      - name: 打包ARM64交叉编译产物
        run: |
          $linkType = "${{ matrix.link_type }}"
          $buildType = "${{ matrix.build_type }}"
          $qtVersion = "${{ env.QT_VERSION }}"
          $gccVersion = "${{ env.GCC_VERSION }}"
          
          # 规范化构建类型名称 (小写)
          $buildTypeNormalized = switch ($buildType) {
            "release" { "release" }
            "debug" { "debug" }
            "release-sepdbg" { "relwithdebinfo" }
            default { $buildType.ToLower() }
          }
          
          # 规范化链接类型名称 (小写)
          $linkTypeNormalized = switch ($linkType) {
            "static" { "static" }
            "shared" { "shared" }
            default { $linkType.ToLower() }
          }
          
          # 三段式命名格式：软件名-平台架构编译器-配置类型
          $archiveName = "qt${qtVersion}-linux_aarch64_gnu${gccVersion}-${linkTypeNormalized}_${buildTypeNormalized}.7z"
          $sourcePath = "D:\a\QtBuild\Qt\$qtVersion-$linkType"
          
          # 检查源目录是否存在
          if (Test-Path $sourcePath) {
            7z a $archiveName $sourcePath -mx=9
            echo "Archive created: $archiveName"
            echo "Source path: $sourcePath"
            
            # 输出到环境变量供后续步骤使用
            echo "ARCHIVE_NAME=$archiveName" >> $env:GITHUB_ENV
          } else {
            echo "Error: Source path does not exist: $sourcePath"
            exit 1
          }
        shell: pwsh

      - name: 上传ARM64交叉编译产物
        uses: actions/upload-artifact@v4
        with:
          name: qt${{ env.QT_VERSION }}-linux_aarch64_gnu${{ env.GCC_VERSION }}-${{ matrix.link_type }}_${{ matrix.build_type == 'release' && 'release' || matrix.build_type == 'debug' && 'debug' || 'relwithdebinfo' }}
          path: ${{ env.ARCHIVE_NAME }}