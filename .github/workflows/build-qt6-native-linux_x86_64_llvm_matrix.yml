# =============================================================================
# Qt 6 Linux x86_64 LLVM Build Matrix
# Standardized workflow for building Qt with LLVM/Clang on Linux via WSL2
# =============================================================================

name: build-qt6-native-linux_x86_64_llvm_matrix

on:
  workflow_dispatch:
    inputs:
      qt_version:
        description: 'Qt Version'
        required: true
        default: '6.9.2'
        type: string
      compiler_version:
        description: 'LLVM/Clang Version'
        required: true
        default: '18'
        type: choice
        options:
        - '15'
        - '16'
        - '17'
        - '18'
        - '19'
        - '20'
      vulkan_sdk:
        description: 'Vulkan SDK (none for disable, runtime-* for specific version)'
        required: true
        type: choice
        options:
        - 'none'
        - 'runtime-1.4.321.0'
        - 'runtime-1.3.290.0'
        default: 'none'
      test_mode:
        description: 'Test Mode (build qtbase only for faster testing)'
        required: true
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      create_release:
        description: 'Create Release'
        required: true
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

env:
  QT_VERSION: ${{ github.event.inputs.qt_version || '6.9.2' }}
  COMPILER_VERSION: ${{ github.event.inputs.compiler_version || '18' }}
  VULKAN_CHOICE: ${{ github.event.inputs.vulkan_sdk || 'none' }}
  TEST_MODE: ${{ github.event.inputs.test_mode || 'false' }}
  ACTIONS_STEP_DEBUG: 'true'

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        link_type: [static, shared]
        build_type: [release, debug, release-sepdbg]
        exclude:
          - link_type: static
            build_type: debug
          - link_type: static
            build_type: release-sepdbg
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup WSL2 with Ubuntu 24.04
        uses: Vampire/setup-wsl@v3
        with:
          distribution: Ubuntu-24.04
          use-cache: 'false'
          set-as-default: 'true'

      - name: Extract Qt major.minor version
        id: qt_version
        run: |
          $version = "${{ env.QT_VERSION }}"
          $parts = $version.Split('.')
          $major_minor = "$($parts[0]).$($parts[1])"
          echo "major_minor=$major_minor" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Create build scripts
        run: |
          # WSL environment setup script
          $setupScript = "#!/bin/bash`nset -e`necho `"=== Qt ${{ env.QT_VERSION }} Linux LLVM Build Setup ===`"`n`nexport DEBIAN_FRONTEND=noninteractive`n`n# Enable Universe repository`necho `"Enabling Ubuntu Universe repository...`"`nsudo add-apt-repository universe -y >/dev/null 2>&1`nsudo apt-get update -qq`n`n# Install base build tools`necho `"Installing base build tools...`"`nsudo apt-get install -y -qq --no-install-recommends build-essential cmake ninja-build python3 pkg-config wget curl xz-utils`n`n# Add LLVM repository and install compiler`necho `"Adding LLVM APT repository...`"`nwget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc >/dev/null`necho `"deb http://apt.llvm.org/noble/ llvm-toolchain-noble-${{ env.COMPILER_VERSION }} main`" | sudo tee /etc/apt/sources.list.d/llvm.list`nsudo apt-get update -qq`n`necho `"Installing LLVM/Clang-${{ env.COMPILER_VERSION }} toolchain...`"`nsudo apt-get install -y -qq --no-install-recommends clang-${{ env.COMPILER_VERSION }} clang++-${{ env.COMPILER_VERSION }} lld-${{ env.COMPILER_VERSION }}`nsudo apt-get install -y -qq --no-install-recommends libc++-${{ env.COMPILER_VERSION }}-dev libc++abi-${{ env.COMPILER_VERSION }}-dev`n`n# Setup alternatives`nsudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${{ env.COMPILER_VERSION }} 100`nsudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${{ env.COMPILER_VERSION }} 100`nsudo update-alternatives --install /usr/bin/lld lld /usr/bin/lld-${{ env.COMPILER_VERSION }} 100`n`n# Install Qt dependencies in batches`necho `"Installing X11/OpenGL libraries...`"`nsudo apt-get install -y -qq --no-install-recommends libgl1-mesa-dev libglu1-mesa-dev libx11-dev libxext-dev libxrender-dev libxrandr-dev libxcursor-dev`n`necho `"Installing XCB libraries...`"`nsudo apt-get install -y -qq --no-install-recommends libxcb1-dev libxcb-util-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-randr0-dev libxcb-cursor-dev`n`necho `"Installing remaining dependencies...`"`nsudo apt-get install -y -qq --no-install-recommends libxkbcommon-dev libxkbcommon-x11-dev libfontconfig1-dev libfreetype6-dev libglib2.0-dev libegl1-mesa-dev libssl-dev`n`n# Verify compiler installation`necho `"=== Compiler Information ===`"`nclang-${{ env.COMPILER_VERSION }} --version | head -1`nclang++-${{ env.COMPILER_VERSION }} --version | head -1`nlld-${{ env.COMPILER_VERSION }} --version | head -1`necho `"============================`"`n`n# Cleanup`nsudo apt-get clean >/dev/null 2>&1`nsudo rm -rf /var/lib/apt/lists/*`necho `"WSL2 environment setup completed`""
          [System.IO.File]::WriteAllText("setup_environment.sh", $setupScript.Replace("`r`n", "`n"), [System.Text.UTF8Encoding]::new($false))

          # Qt download script
          $downloadScript = "#!/bin/bash`nset -e`necho `"=== Downloading Qt ${{ env.QT_VERSION }} Source ===`"`n`nqt_version=`"${{ env.QT_VERSION }}`"`nmajor_minor=`"${{ steps.qt_version.outputs.major_minor }}`"`nsource_url=`"https://download.qt.io/official_releases/qt/`$major_minor/`$qt_version/single/qt-everywhere-src-`$qt_version.tar.xz`"`n`necho `"Downloading from: `$source_url`"`nwget -q --show-progress -O `"qt-everywhere-src-`$qt_version.tar.xz`" `"`$source_url`"`n`necho `"Qt source download completed`""
          [System.IO.File]::WriteAllText("download_qt.sh", $downloadScript.Replace("`r`n", "`n"), [System.Text.UTF8Encoding]::new($false))

          # Main build script
          $buildScript = "#!/bin/bash`nset -e`n`necho `"=== Qt ${{ env.QT_VERSION }} Linux LLVM Build Started ===`"`n`n# Build parameters`nqt_version=`"${{ env.QT_VERSION }}`"`ncompiler_version=`"${{ env.COMPILER_VERSION }}`"`nbuild_type=`"`$1`"`nlink_type=`"`$2`"`nseparate_debug=`"`$3`"`ntest_mode=`"${{ env.TEST_MODE }}`"`nvulkan_choice=`"${{ env.VULKAN_CHOICE }}`"`n`necho `"=== Build Configuration ===`"`necho `"Qt Version: `$qt_version`"`necho `"LLVM Version: `$compiler_version`"`necho `"Build Type: `$build_type`"`necho `"Link Type: `$link_type`"`necho `"Separate Debug: `$separate_debug`"`necho `"Test Mode: `$test_mode`"`necho `"Vulkan Support: `$vulkan_choice`"`necho `"==============================`"`n`n# Set LLVM environment`nexport CC=clang-`$compiler_version`nexport CXX=clang++-`$compiler_version`nexport LLVM_INSTALL_DIR=/usr/lib/llvm-`$compiler_version`n`n# Verify compiler`necho `"Using compiler:`"`nclang-`$compiler_version --version | head -1`nclang++-`$compiler_version --version | head -1`necho `"==============================`"`n`n# Extract Qt source`necho `"Extracting Qt source...`"`ntar -xf qt-everywhere-src-`$qt_version.tar.xz`nrm qt-everywhere-src-`$qt_version.tar.xz`n`n# Setup build directories`nSRC_QT=`"`$(pwd)/qt-everywhere-src-`$qt_version`"`nBUILD_DIR=`"`$(pwd)/build`"`nINSTALL_DIR=`"`$(pwd)/install`"`n`nmkdir -p `"`$BUILD_DIR`"`nmkdir -p `"`$INSTALL_DIR`"`ncd `"`$BUILD_DIR`"`n`n# Configure Qt build options`nCFG_OPTIONS=`"-`$link_type -prefix `$INSTALL_DIR -c++std c++20 -opensource -confirm-license -qt-libpng -qt-libjpeg -qt-zlib -qt-pcre -openssl-linked -platform linux-clang -opengl desktop`"`n`n# Add test mode configuration`nif [ `"`$test_mode`" = `"true`" ]; then`n  CFG_OPTIONS=`"`$CFG_OPTIONS -nomake examples -nomake tests -skip qtwebengine -skip qtdoc`"`n  echo `"Test mode enabled: building qtbase only`"`nelse`n  CFG_OPTIONS=`"`$CFG_OPTIONS -nomake examples -nomake tests -skip qtwebengine`"`nfi`n`n# Disable Vulkan`nCFG_OPTIONS=`"`$CFG_OPTIONS -no-feature-vulkan`"`n`n# Build type configuration`nif [ `"`$build_type`" = `"debug`" ]; then`n  CFG_OPTIONS=`"`$CFG_OPTIONS -debug`"`nelse`n  CFG_OPTIONS=`"`$CFG_OPTIONS -release`"`nfi`n`n# Separate debug info for shared builds`nif [ `"`$link_type`" = `"shared`" ] && [ `"`$separate_debug`" = `"true`" ]; then`n  CFG_OPTIONS=`"`$CFG_OPTIONS -force-debug-info -separate-debug-info`"`nfi`n`n# Set LLVM-specific compiler flags`nexport CFLAGS=`"-fuse-ld=lld`"`nexport CXXFLAGS=`"-fuse-ld=lld -stdlib=libc++`"`nexport LDFLAGS=`"-fuse-ld=lld -stdlib=libc++`"`n`necho `"=== Qt Configuration ===`"`necho `"Configure options: `$CFG_OPTIONS`"`necho `"========================`"`n`n# Configure Qt`necho `"Configuring Qt...`"`n`"`$SRC_QT/configure`" `$CFG_OPTIONS`n`n# Build Qt with memory optimization`necho `"=== Building Qt ===`"`nPARALLEL_JOBS=`$(nproc)`nif [ `$PARALLEL_JOBS -gt 3 ]; then`n  PARALLEL_JOBS=3`nfi`n`n# Set memory-optimized compiler flags`nexport CXXFLAGS=`"`$CXXFLAGS -fno-lto`"`nexport LDFLAGS=`"`$LDFLAGS -Wl,--no-keep-memory`"`n`necho `"Using `$PARALLEL_JOBS parallel jobs`"`ncmake --build . --parallel `$PARALLEL_JOBS`n`n# Install Qt`necho `"Installing Qt...`"`ncmake --install .`n`n# Save build configuration summary`necho `"Searching for config.summary file...`"`nconfig_summary_found=false`n`nfor search_path in `"`$(pwd)/config.summary`" `"`$(pwd)/../config.summary`" `"`$(pwd)/qtbase/config.summary`" `"`$(find . -name 'config.summary' 2>/dev/null | head -1)`"; do`n  if [ -f `"`$search_path`" ]; then`n    echo `"Found config.summary at: `$search_path`"`n    cp `"`$search_path`" `"`$(pwd)/../build_summary.txt`"`n    echo `"Build summary saved from `$search_path`"`n    config_summary_found=true`n    break`n  fi`ndone`n`nif [ `"`$config_summary_found`" = `"false`" ]; then`n  echo `"WARNING: config.summary not found`"`n  echo `"Creating basic build summary...`"`n  echo `"Qt ${{ env.QT_VERSION }} Linux LLVM Build Summary`" > `"`$(pwd)/../build_summary.txt`"`n  echo `"=====================================`" >> `"`$(pwd)/../build_summary.txt`"`n  echo `"Build Type: `$build_type`" >> `"`$(pwd)/../build_summary.txt`"`n  echo `"Link Type: `$link_type`" >> `"`$(pwd)/../build_summary.txt`"`n  echo `"Compiler: LLVM/Clang `$compiler_version`" >> `"`$(pwd)/../build_summary.txt`"`n  echo `"Platform: Linux x86_64 (WSL2)`" >> `"`$(pwd)/../build_summary.txt`"`n  echo `"Test Mode: `$test_mode`" >> `"`$(pwd)/../build_summary.txt`"`n  echo `"Build Date: `$(date +'%Y-%m-%d %H:%M:%S UTC')`" >> `"`$(pwd)/../build_summary.txt`"`nfi`n`n# Cleanup source directory`ncd `"`$(pwd)/..`"`nrm -rf `"qt-everywhere-src-`$qt_version`"`n`necho `"=== Qt build completed successfully ===`""
          [System.IO.File]::WriteAllText("build_qt.sh", $buildScript.Replace("`r`n", "`n"), [System.Text.UTF8Encoding]::new($false))

          # Build runner script
          $runnerScript = "#!/bin/bash`nset -e`n`n# Parse matrix parameters`nbuild_type=`"${{ matrix.build_type }}`"`nlink_type=`"${{ matrix.link_type }}`"`n`n# Handle release-sepdbg build type`nactual_build_type=`"`$build_type`"`nseparate_debug=`"false`"`nif [ `"`$build_type`" = `"release-sepdbg`" ]; then`n  actual_build_type=`"release`"`n  if [ `"`$link_type`" = `"shared`" ]; then`n    separate_debug=`"true`"`n  fi`nfi`n`n# Make scripts executable`nchmod +x ./setup_environment.sh`nchmod +x ./download_qt.sh`nchmod +x ./build_qt.sh`n`n# Run build process`n./build_qt.sh `"`$actual_build_type`" `"`$link_type`" `"`$separate_debug`""
          [System.IO.File]::WriteAllText("run_build.sh", $runnerScript.Replace("`r`n", "`n"), [System.Text.UTF8Encoding]::new($false))
        shell: pwsh

      - name: Setup WSL2 environment
        run: wsl bash ./setup_environment.sh

      - name: Download Qt source
        run: wsl bash ./download_qt.sh

      - name: Build Qt
        run: wsl bash ./run_build.sh

      - name: Package binaries
        run: |
          $linkType = "${{ matrix.link_type }}"
          $buildType = "${{ matrix.build_type }}"
          $qtVersion = "${{ env.QT_VERSION }}"
          $compilerVersion = "${{ env.COMPILER_VERSION }}"
          
          # Normalize build type name
          $buildTypeNormalized = switch ($buildType) {
            "release" { "release" }
            "debug" { "debug" }
            "release-sepdbg" { "relwithdebinfo" }
            default { $buildType.ToLower() }
          }
          
          # Create standardized archive name
          $archiveName = "qt${qtVersion}-linux-x86_64-llvm${compilerVersion}-${linkType}_${buildTypeNormalized}.tar.xz"
          
          Write-Host "Creating archive: $archiveName"
          wsl tar -cJf $archiveName -C install .
          
          if (Test-Path $archiveName) {
            Write-Host "Archive created successfully: $(Get-Item $archiveName | Select-Object -ExpandProperty Length) bytes"
            echo "ARCHIVE_NAME=$archiveName" >> $env:GITHUB_ENV
          } else {
            Write-Error "Failed to create archive"
            exit 1
          }
          
          # Prepare build report
          $reportName = "qt-build-report_${linkType}_${buildType}.txt"
          if (wsl test -f build_summary.txt) {
            wsl cp build_summary.txt $reportName
          } else {
            $basicReport = "Qt ${{ env.QT_VERSION }} Build Report`n" + 
                          "Build Type: $buildType`n" +
                          "Link Type: $linkType`n" +
                          "Compiler: LLVM/Clang ${{ env.COMPILER_VERSION }}`n" +
                          "Platform: Linux x86_64 (WSL2)`n" +
                          "Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')"
            [System.IO.File]::WriteAllText($reportName, $basicReport, [System.Text.UTF8Encoding]::new($false))
          }
          echo "REPORT_FILE=$reportName" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: qt${{ env.QT_VERSION }}-linux-x86_64-llvm${{ env.COMPILER_VERSION }}-${{ matrix.link_type }}_${{ matrix.build_type == 'release' && 'release' || matrix.build_type == 'debug' && 'debug' || 'relwithdebinfo' }}
          path: ${{ env.ARCHIVE_NAME }}
          if-no-files-found: error

      - name: Upload build report
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.link_type }}_${{ matrix.build_type }}
          path: ${{ env.REPORT_FILE }}
          if-no-files-found: error

      # Note: This workflow only builds and uploads artifacts
      # Use the 'release-qt-unified' workflow to create releases with all platforms