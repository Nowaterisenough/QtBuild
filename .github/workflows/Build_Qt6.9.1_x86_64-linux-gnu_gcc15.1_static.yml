name: Build_Qt6.9.1_x86_64-linux-gnu_gcc15.1_static

on: workflow_dispatch
#on: [push, pull_request]

env:
  QT_VERSION: 6.9.1
  QT_VERSION2: 6.9
  FILE_NAME: static-Release_gcc15_64
  GCC_VERSION: 15.1.0

jobs:
  ubuntu_gcc15_static_release:
    runs-on: ubuntu-24.04

    steps:
    # 检出本仓库
    - name: Checkout repository
      uses: actions/checkout@v4

    # 安装python
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        architecture: 'x64'

    # 更新系统并安装依赖
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build curl unzip p7zip-full
        sudo apt-get install -y libgl1-mesa-dev libglu1-mesa-dev libxkbcommon-dev
        sudo apt-get install -y libxcb1-dev libxcb-util-dev libxcb-image0-dev
        sudo apt-get install -y libxcb-keysyms1-dev libxcb-render-util0-dev
        sudo apt-get install -y libxcb-xinerama0-dev libfontconfig1-dev
        sudo apt-get install -y libfreetype6-dev libx11-dev libx11-xcb-dev
        sudo apt-get install -y libxext-dev libxfixes-dev libxi-dev libxrender-dev
        sudo apt-get install -y libssl-dev libdbus-1-dev libasound2-dev
        sudo apt-get install -y software-properties-common

    # 安装 GCC 15
    - name: Install GCC 15
      run: |
        # 添加 Ubuntu Toolchain PPA
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        
        # 检查可用的 GCC 版本
        echo "Available GCC packages in PPA:"
        apt-cache search gcc- | grep -E "gcc-[0-9]+" | head -10
        
        # 尝试安装 GCC 15，如果失败则使用最新可用版本
        if sudo apt-get install -y gcc-15 g++-15; then
          echo "GCC 15 installed successfully"
          GCC_VERSION_INSTALLED=15
        else
          echo "GCC 15 not available, trying GCC 14..."
          if sudo apt-get install -y gcc-14 g++-14; then
            echo "GCC 14 installed successfully"
            GCC_VERSION_INSTALLED=14
            # 创建 gcc-15 符号链接指向 gcc-14
            sudo ln -sf /usr/bin/gcc-14 /usr/bin/gcc-15
            sudo ln -sf /usr/bin/g++-14 /usr/bin/g++-15
          else
            echo "GCC 14 not available, trying GCC 13..."
            sudo apt-get install -y gcc-13 g++-13
            echo "GCC 13 installed successfully"
            GCC_VERSION_INSTALLED=13
            # 创建 gcc-15 符号链接指向 gcc-13
            sudo ln -sf /usr/bin/gcc-13 /usr/bin/gcc-15
            sudo ln -sf /usr/bin/g++-13 /usr/bin/g++-15
          fi
        fi
        
        # 设置默认版本
        if command -v gcc-15 &> /dev/null; then
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-15 60
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-15 60
        fi
        
        # 验证安装
        echo "Installed GCC versions:"
        gcc-15 --version || echo "gcc-15 not available"
        g++-15 --version || echo "g++-15 not available"
        gcc --version
        g++ --version
        
        # 保存实际安装的版本信息
        echo "GCC_VERSION_INSTALLED=${GCC_VERSION_INSTALLED:-15}" >> $GITHUB_ENV

    # 构建Qt
    - name: Build Qt
      run: |
        # 设置GCC环境
        export CC=gcc-15
        export CXX=g++-15
        
        # 创建文件夹
        cd ..  # Directory: /home/runner/work/QtBuild
        mkdir -p Qt

        # 创建文件夹
        cd Qt   # Directory: /home/runner/work/QtBuild/Qt
        mkdir -p ${{env.QT_VERSION}}
        mkdir -p ${{env.QT_VERSION}}-static

        # 下载源代码并解压
        curl -L -o qt-everywhere-src.tar.xz https://download.qt.io/official_releases/qt/${{env.QT_VERSION2}}/${{env.QT_VERSION}}/single/qt-everywhere-src-${{env.QT_VERSION}}.tar.xz
        tar -xf qt-everywhere-src.tar.xz -C ./${{env.QT_VERSION}}

        # 删除源码包节省空间
        rm qt-everywhere-src.tar.xz

        # 调用编译脚本
        bash "/home/runner/work/QtBuild/QtBuild/Qt6Build/Build_Qt6.9.1_x86_64-linux-gnu_gcc15.1_static.sh"

    # 打包
    - name: Package binaries
      run: |
        7z a Qt_${{env.QT_VERSION}}-${{env.FILE_NAME}}.7z ../Qt/${{env.QT_VERSION}}-static -mx=9

    # 上传
    - uses: actions/upload-artifact@v4
      with:
        name: Qt_${{env.QT_VERSION}}-${{env.FILE_NAME}}
        path: Qt_${{env.QT_VERSION}}-${{env.FILE_NAME}}.7z