# =============================================================================
# Qt 6 Linux x86_64 GCC Build Matrix
# Standardized workflow using dedicated build scripts
# =============================================================================

name: build-qt6-native-linux_x86_64_gcc_matrix

on:
  workflow_dispatch:
    inputs:
      qt_version:
        description: 'Qt Version'
        required: true
        default: '6.9.2'
        type: string
      compiler_version:
        description: 'Compiler Version'
        required: true
        default: '15.2'
        type: choice
        options:
        - '11'
        - '12'
        - '13'
        - '14'
        - '15.2'
      vulkan_sdk:
        description: 'Vulkan support (none/runtime-*)'
        required: true
        type: choice
        options:
        - 'none'
        - 'runtime-1.3.290.0'
        - 'runtime-1.4.321.0'
        default: 'runtime-1.4.321.0'
      test_mode:
        description: 'Test mode (build qtbase only)'
        required: true
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

env:
  QT_VERSION: ${{ github.event.inputs.qt_version || '6.9.2' }}
  COMPILER_VERSION: ${{ github.event.inputs.compiler_version || '15.2' }}
  VULKAN_CHOICE: ${{ github.event.inputs.vulkan_sdk || 'runtime-1.4.321.0' }}
  TEST_MODE: ${{ github.event.inputs.test_mode || 'false' }}

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        link_type: [static, shared]
        build_type: [release, debug, release-sepdbg]
        exclude:
          - link_type: static
            build_type: debug
          - link_type: static
            build_type: release-sepdbg

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup WSL2
        uses: Vampire/setup-wsl@v3
        with:
          distribution: Ubuntu-24.04
          use-cache: 'false'
          set-as-default: 'true'

      - name: Cache GCC 15.2
        if: ${{ env.COMPILER_VERSION == '15.2' }}
        uses: actions/cache@v4
        with:
          path: gcc-15.2-install.tar.xz
          key: gcc-15.2-ubuntu2404-${{ runner.os }}

      - name: Copy scripts to WSL
        run: |
          wsl cp Qt6Build/setup-wsl-gcc.sh .
          wsl cp Qt6Build/download-qt-source.sh .
          wsl cp Qt6Build/build-qt6-native-linux_x86_64_gcc.sh .
          wsl chmod +x setup-wsl-gcc.sh download-qt-source.sh build-qt6-native-linux_x86_64_gcc.sh

      - name: Setup WSL environment
        run: wsl bash ./setup-wsl-gcc.sh "${{ env.COMPILER_VERSION }}" "${{ env.VULKAN_CHOICE }}"

      - name: Download Qt source
        run: wsl bash ./download-qt-source.sh "${{ env.QT_VERSION }}"

      - name: Build Qt
        run: |
          $buildType = "${{ matrix.build_type }}"
          $linkType = "${{ matrix.link_type }}"

          # Handle release-sepdbg
          $actualBuildType = $buildType
          $separateDebug = "false"
          if ($buildType -eq "release-sepdbg") {
            $actualBuildType = "release"
            if ($linkType -eq "shared") {
              $separateDebug = "true"
            }
          }

          # Set database environment variables in WSL
          wsl bash -c "export PostgreSQL_ROOT=/usr && export MYSQL_ROOT=/usr && ./build-qt6-native-linux_x86_64_gcc.sh '${{ env.QT_VERSION }}' '${{ env.COMPILER_VERSION }}' '$actualBuildType' '$linkType' '$separateDebug' '${{ env.VULKAN_CHOICE }}' '${{ env.TEST_MODE }}'"
        shell: pwsh

      - name: Export config.summary
        run: |
          $buildDir = "build"
          $reportName = "qt-build-report_${{ matrix.link_type }}_${{ matrix.build_type }}.txt"

          # Search for config.summary in WSL
          $summaryPath = wsl bash -c "find build -name 'config.summary' -type f 2>/dev/null | head -1"

          if ($summaryPath) {
            Write-Host "Found config.summary at: $summaryPath"
            wsl cp "$summaryPath" "$reportName"
          } else {
            Write-Host "WARNING: config.summary not found, creating basic report"
            $qtVersion = "${{ env.QT_VERSION }}"
            $compilerVersion = "${{ env.COMPILER_VERSION }}"
            $buildTypeVal = "${{ matrix.build_type }}"
            $linkTypeVal = "${{ matrix.link_type }}"
            $testMode = "${{ env.TEST_MODE }}"
            $vulkan = "${{ env.VULKAN_CHOICE }}"
            $buildDate = Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC'

            $basicReport = "Qt $qtVersion Linux GCC $compilerVersion Build Report`n" +
                          "Build Type: $buildTypeVal`n" +
                          "Link Type: $linkTypeVal`n" +
                          "Compiler: GCC $compilerVersion`n" +
                          "Platform: Linux x86_64 (WSL2)`n" +
                          "Test Mode: $testMode`n" +
                          "Vulkan: $vulkan`n" +
                          "Build Date: $buildDate"
            [System.IO.File]::WriteAllText($reportName, $basicReport, [System.Text.UTF8Encoding]::new($false))
          }

          echo "REPORT_FILE=$reportName" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Package binaries
        run: |
          $linkType = "${{ matrix.link_type }}"
          $buildType = "${{ matrix.build_type }}"

          # Normalize build type name
          $buildTypeNormalized = switch ($buildType) {
            "release" { "release" }
            "debug" { "debug" }
            "release-sepdbg" { "relwithdebinfo" }
            default { $buildType.ToLower() }
          }

          # Create standardized archive name
          $archiveName = "qt${{ env.QT_VERSION }}-linux-x86_64-gcc${{ env.COMPILER_VERSION }}-${linkType}_${buildTypeNormalized}.tar.xz"

          Write-Host "Creating archive: $archiveName"
          wsl tar -cJf "$archiveName" -C output .

          if (Test-Path $archiveName) {
            $size = (Get-Item $archiveName).Length
            Write-Host "Archive created: $size bytes"
            echo "ARCHIVE_NAME=$archiveName" >> $env:GITHUB_ENV
          } else {
            Write-Error "Failed to create archive"
            exit 1
          }
        shell: pwsh

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: qt${{ env.QT_VERSION }}-linux-x86_64-gcc${{ env.COMPILER_VERSION }}-${{ matrix.link_type }}_${{ matrix.build_type == 'release' && 'release' || matrix.build_type == 'debug' && 'debug' || 'relwithdebinfo' }}
          path: ${{ env.ARCHIVE_NAME }}
          if-no-files-found: error

      - name: Upload build report
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.link_type }}_${{ matrix.build_type }}
          path: ${{ env.REPORT_FILE }}
          if-no-files-found: error
