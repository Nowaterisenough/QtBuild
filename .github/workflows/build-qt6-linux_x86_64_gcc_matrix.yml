name: build-qt6-linux_x86_64_gcc_matrix

on:
  workflow_dispatch:
    inputs:
      qt_version:
        description: 'Qt version'
        required: true
        default: '6.9.1'
      gcc_version:
        description: 'GCC version'
        required: true
        default: '13'
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: 'true'
        type: choice
        options: [ 'true', 'false' ]

env:
  QT_VERSION: ${{ github.event.inputs.qt_version || '6.9.1' }}
  GCC_VERSION: ${{ github.event.inputs.gcc_version || '13' }}

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        link_type:  [ static, shared ]
        build_type: [ release, debug, release-sepdbg ]
        exclude:   # debug + static 没意义
          - link_type: static
            build_type: debug

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Enable WSL2 (Ubuntu 24.04)
        uses: Vampire/setup-wsl@v3
        with:
          distribution: Ubuntu-24.04
          set-as-default: true
          use-cache: false

      ########################################################################
      # 创建 3 个脚本：wsl_setup.sh / download_qt.sh / build-qt…wsl2.sh
      ########################################################################
      - name: Generate helper scripts (LF line-endings)
        shell: pwsh
        run: |
          # ----------------- wsl_setup.sh -----------------
          @'
          #!/usr/bin/env bash
          set -e
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
               build-essential gcc-${{ env.GCC_VERSION }} g++-${{ env.GCC_VERSION }} \
               cmake ninja-build python3 pkg-config libssl-dev \
               libgl1-mesa-dev libegl1-mesa-dev libxkbcommon-dev libxcb1-dev \
               libfontconfig1-dev libfreetype6-dev libxi-dev libxrender-dev \
               libxrandr-dev libx11-dev libxext-dev libxcb-image0-dev \
               libxcb-render0-dev libxcb-shm0-dev libxcb-icccm4-dev \
               libwayland-dev libasound2-dev libpulse-dev wget xz-utils
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ env.GCC_VERSION }} 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${{ env.GCC_VERSION }} 100
          '@ | Set-Content -NoNewline -Encoding UTF8 wsl_setup.sh

          # ----------------- download_qt.sh -----------------
          @'
          #!/usr/bin/env bash
          set -e
          ver="${QT_VERSION}"
          base="$(echo "${ver}" | awk -F. '{print $1"."$2}')"
          url="https://download.qt.io/official_releases/qt/${base}/${ver}/single/qt-everywhere-src-${ver}.tar.xz"
          echo "Downloading ${url}"
          wget -q --show-progress "${url}" -O "qt-everywhere-src-${ver}.tar.xz"
          mkdir -p output
          '@ | Set-Content -NoNewline -Encoding UTF8 download_qt.sh

          # ----------------- build-qt6-linux_x86_64_gcc_wsl2.sh -----------------
          @'
          #!/usr/bin/env bash
          set -e

          # --- 参数 ---
          QT_VERSION=${QT_VERSION:-6.9.1}
          GCC_VERSION=${GCC_VERSION:-13}
          BUILD_TYPE=${BUILD_TYPE:-release}
          LINK_TYPE=${LINK_TYPE:-shared}
          SEPARATE_DEBUG=${SEPARATE_DEBUG:-false}

          # --- 解压源码 ---
          tar -xf qt-everywhere-src-${QT_VERSION}.tar.xz
          rm -f  qt-everywhere-src-${QT_VERSION}.tar.xz
          SRC_QT=$PWD/qt-everywhere-src-${QT_VERSION}
          BUILD_DIR=$PWD/build
          INSTALL_DIR=$PWD/output/qt-${QT_VERSION}-${LINK_TYPE}-gcc${GCC_VERSION}
          mkdir -p "${BUILD_DIR}" "${INSTALL_DIR}"
          cd "${BUILD_DIR}"

          # --- 配置 ---
          CFG="-${LINK_TYPE} -prefix ${INSTALL_DIR} -nomake examples -nomake tests \
               -c++std c++20 -skip qtwebengine -opensource -confirm-license \
               -qt-libpng -qt-libjpeg -qt-zlib -qt-pcre -openssl-linked \
               -platform linux-g++ -opengl desktop"

          [ "${BUILD_TYPE}" = debug ] && CFG="${CFG} -debug" || CFG="${CFG} -release"
          if [[ "${LINK_TYPE}" == shared && "${SEPARATE_DEBUG}" == true ]]; then
              CFG="${CFG} -force-debug-info -separate-debug-info"
          fi

          "${SRC_QT}/configure" ${CFG}
          cmake --build . --parallel $(nproc)
          cmake --install .

          # --- 打包 ---
          ARCHIVE_NAME="qt${QT_VERSION}-linux-x86_64-gcc${GCC_VERSION}-${LINK_TYPE}_${BUILD_TYPE}.tar.xz"
          tar -cJf "${ARCHIVE_NAME}" -C "${INSTALL_DIR}" .
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          '@ | Set-Content -NoNewline -Encoding UTF8 build-qt6-linux_x86_64_gcc.sh
          
          Get-ChildItem -Name
          
      ########################################################################
      # 执行脚本
      ########################################################################
      - name: Prepare WSL environment
        run: |
          wsl bash ./wsl_setup.sh

      - name: Download Qt
        run: |
          wsl bash ./download_qt.sh

      - name: Build Qt
        run: |
          wsl bash -c "
            export QT_VERSION='${{ env.QT_VERSION }}'
            export GCC_VERSION='${{ env.GCC_VERSION }}'
            export BUILD_TYPE='${{ matrix.build_type }}'
            export LINK_TYPE='${{ matrix.link_type }}'
            if [ '${{ matrix.build_type }}' = 'release-sepdbg' ]; then
              export BUILD_TYPE='release'
              [ '${{ matrix.link_type }}' = 'shared' ] && export SEPARATE_DEBUG=true
            fi
            bash ./build-qt6-linux_x86_64_gcc_wsl2.sh
          "

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: qt${{ env.QT_VERSION }}-linux-gcc${{ env.GCC_VERSION }}-${{ matrix.link_type }}_${{ matrix.build_type }}
          path: ${{ env.ARCHIVE_NAME }}

  release:
    if: ${{ github.event.inputs.create_release == 'true' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with: { path: artifacts }

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: qt${{ env.QT_VERSION }}-gcc${{ env.GCC_VERSION }}-$(date +'%Y%m%d%H%M%S')
          name: Qt ${{ env.QT_VERSION }} (GCC ${{ env.GCC_VERSION }}) – Linux/WSL2
          files: artifacts/**/*.tar.xz