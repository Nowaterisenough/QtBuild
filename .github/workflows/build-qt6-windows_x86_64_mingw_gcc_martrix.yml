name: build-qt6-windows_x86_64_mingw_gcc_matrix

on:
  workflow_dispatch:
    inputs:
      qt_version:
        description: 'QT Version'
        required: true
        default: '6.9.2'
      gcc_version:
        description: 'GCC Version'
        required: true
        type: choice
        options:
        - '15.2.0'
        - '15.1.0'
        - '14.2.0'
        - '14.1.0'
        - '13.2.0'
        - '13.1.0'
        - '12.2.0'
        default: '15.2.0'
      runtime:
        description: 'Runtime (ucrt/msvcrt)'
        required: true
        default: 'ucrt'
        type: choice
        options: [ucrt, msvcrt]
      test_mode:
        description: 'Test Mode (only build qtbase)'
        required: true
        default: 'false'
        type: choice
        options: ['true','false']
      create_release:
        description: 'Create Release'
        required: true
        default: 'true'
        type: choice
        options: ['true','false']

env:
  QT_VERSION: ${{ github.event.inputs.qt_version || '6.9.2' }}
  GCC_VERSION: ${{ github.event.inputs.gcc_version || '15.2.0' }}
  RUNTIME: ${{ github.event.inputs.runtime || 'ucrt' }}
  TEST_MODE: ${{ github.event.inputs.test_mode || 'false' }}

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        link_type: [static, shared]
        build_type: [release, debug, release-sepdbg]
        exclude:
          - link_type: static
            build_type: release-sepdbg
          - link_type: static
            build_type: debug

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          architecture: 'x64'

      - name: Extract Qt major.minor
        id: qt_version
        shell: pwsh
        run: |
          $v="${{ env.QT_VERSION }}".Split('.')
          echo "major_minor=$($v[0]).$($v[1])" >> $env:GITHUB_OUTPUT

      - name: Resolve MinGW
        id: mingw
        shell: pwsh
        run: |
          $gcc="${{ env.GCC_VERSION }}"
          $rt="${{ env.RUNTIME }}"
          function Out($k,$v){echo "$k=$v" >> $env:GITHUB_OUTPUT}
          try {
            $rels = Invoke-RestMethod -Uri "https://api.github.com/repos/niXman/mingw-builds-binaries/releases" -Headers @{ "User-Agent"="GitHub-Actions" }
            $rel = $rels | Where-Object { $_.tag_name -like "$gcc-rt_v*-rev*" } | Select-Object -First 1
            if ($rel) {
              $asset = $rel.assets | Where-Object { $_.name -like "x86_64-$gcc-release-posix-seh-$rt-rt_v*-rev*.7z" } | Select-Object -First 1
              if ($asset) {
                Out "download_url" $asset.browser_download_url
                Out "file_name" $asset.name
                Out "found" "true"
                exit 0
              }
            }
          } catch { }
          $map = @{
            "15.2.0" = @{ rt="rt_v13"; rev="rev0" }
            "15.1.0" = @{ rt="rt_v12"; rev="rev0" }
            "14.2.0" = @{ rt="rt_v12"; rev="rev2" }
            "14.1.0" = @{ rt="rt_v12"; rev="rev0" }
            "13.2.0" = @{ rt="rt_v11"; rev="rev1" }
            "13.1.0" = @{ rt="rt_v11"; rev="rev1" }
            "12.2.0" = @{ rt="rt_v10"; rev="rev2" }
          }
          if (-not $map.ContainsKey($gcc)) { echo "Unsupported GCC: $gcc"; exit 1 }
          $rtv=$map[$gcc].rt; $rev=$map[$gcc].rev
          $name="x86_64-$gcc-release-posix-seh-$rt-$rtv-$rev.7z"
          $url="https://github.com/niXman/mingw-builds-binaries/releases/download/$gcc-$rtv-$rev/$name"
          Out "download_url" $url
          Out "file_name" $name
          Out "found" "fallback"

      - name: Setup MinGW64
        shell: pwsh
        run: |
          cd ..
          curl -L -o "${{ steps.mingw.outputs.file_name }}" "${{ steps.mingw.outputs.download_url }}"
          7z x "${{ steps.mingw.outputs.file_name }}"

      - name: Setup Ninja
        shell: pwsh
        run: |
          cd ..
          curl -L -o ninja.zip https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-win.zip
          mkdir ninja
          unzip -q ninja.zip -d ./ninja

      - name: Setup PostgreSQL
        shell: pwsh
        run: |
          cd ..
          $v="16.6"
          $url="https://get.enterprisedb.com/postgresql/postgresql-$v-1-windows-x64-binaries.zip"
          curl -L -o postgresql.zip $url
          mkdir postgresql
          7z x postgresql.zip -opostgresql
          $pg=(Get-ChildItem -Path "postgresql" -Directory | Select-Object -First 1).FullName
          echo "PostgreSQL_ROOT=$pg" >> $env:GITHUB_ENV
          echo "$pg\bin" >> $env:GITHUB_PATH

      - name: Setup MySQL
        shell: pwsh
        run: |
          cd ..
          $v="8.0.35"
          $url="https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-$v-winx64.zip"
          curl -L -o mysql.zip $url
          7z x mysql.zip
          $mp=(Get-ChildItem -Directory -Filter "mysql-*" | Select-Object -First 1).FullName
          echo "MYSQL_ROOT=$mp" >> $env:GITHUB_ENV

      - name: Setup Protobuf
        shell: pwsh
        run: |
          cd ..
          curl -L -o protoc-win64.zip https://github.com/protocolbuffers/protobuf/releases/download/v30.2/protoc-30.2-win64.zip
          unzip -q protoc-win64.zip -d ./protoc
          echo "D:\a\QtBuild\protoc\bin" >> $env:GITHUB_PATH

      - name: Prepare Qt source
        shell: pwsh
        run: |
          cd ..
          mkdir Qt
          cd Qt
          mkdir "${{ env.QT_VERSION }}"
          mkdir "${{ env.QT_VERSION }}-${{ matrix.link_type }}"
          $mm="${{ steps.qt_version.outputs.major_minor }}"
          $ver="${{ env.QT_VERSION }}"
          curl -L -o qt-everywhere-src.zip "https://download.qt.io/official_releases/qt/$mm/$ver/single/qt-everywhere-src-$ver.zip"
          unzip -q qt-everywhere-src.zip -d "./$ver"

      - name: Build Qt
        shell: cmd
        run: |
          setlocal
          set QT_VERSION=${{ env.QT_VERSION }}
          set GCC_VERSION=${{ env.GCC_VERSION }}
          set BUILD_TYPE=${{ matrix.build_type }}
          set LINK_TYPE=${{ matrix.link_type }}
          set RUNTIME=${{ env.RUNTIME }}
          set TEST_MODE=${{ env.TEST_MODE }}
          if "%BUILD_TYPE%"=="release-sepdbg" (set BUILD_TYPE=release& set SEPARATE_DEBUG=true) else (set SEPARATE_DEBUG=false)
          call D:\a\QtBuild\QtBuild\Qt6Build\build-qt6-windows_x86_64_mingw_gcc.cmd %QT_VERSION% %GCC_VERSION% %BUILD_TYPE% %LINK_TYPE% %SEPARATE_DEBUG% %RUNTIME% "" %TEST_MODE%
          endlocal

      - name: Export Qt configure summary
        shell: pwsh
        run: |
          $bt="${{ matrix.build_type }}"
          $lt="${{ matrix.link_type }}"
          $buildDir="D:\a\QtBuild\build"
          $summary = Join-Path $buildDir "config.summary"
          if (-not (Test-Path $summary)) {
            Write-Host "config.summary not found at $summary"
            Get-ChildItem $buildDir -Recurse -Filter "config.summary" -ErrorAction SilentlyContinue | Select-Object -First 1 | ForEach-Object { $summary=$_.FullName }
          }
          if (-not (Test-Path $summary)) { Write-Host "No config.summary found."; exit 1 }
          $out = Join-Path "${{ github.workspace }}" ("qt-build-report_" + $lt + "_" + $bt + ".txt")
          Copy-Item $summary $out -Force
          echo "REPORT_FILE=$out" >> $env:GITHUB_ENV

      - name: Package
        shell: pwsh
        run: |
          $qt="${{ env.QT_VERSION }}"
          $gcc="${{ env.GCC_VERSION }}"
          $rt="${{ env.RUNTIME }}".ToLower()
          $lt="${{ matrix.link_type }}"
          $bt="${{ matrix.build_type }}"
          $btName = switch ($bt) { "release" {"release"} "debug" {"debug"} default {"relwithdebinfo"} }
          $name="qt$qt-windows-x86_64-mingw_gcc$gcc" + "_$rt-$lt" + "_$btName.7z"
          $src="D:\a\QtBuild\Qt\$qt-$lt"
          if (-not (Test-Path $src)) { echo "Missing: $src"; exit 1 }
          $compDir=(Get-ChildItem -Path $src -Directory | Where-Object { $_.Name -like "mingw*" } | Select-Object -First 1)
          if (-not $compDir) { echo "No mingw* dir under $src"; exit 1 }
          $qtRoot=$compDir.FullName
          if (-not (Test-Path (Join-Path $qtRoot "bin"))) {
            $qtRoot=(Get-ChildItem -Path $compDir.FullName -Directory | Where-Object { Test-Path (Join-Path $_.FullName "bin\qtpaths.exe") } | Select-Object -First 1).FullName
          }
          if (-not $qtRoot) { echo "Qt installation not found."; exit 1 }
          $finalRoot="qt$qt-windows-x86_64-mingw_gcc$gcc" + "_$rt-$lt" + "_$btName"
          $tmp="D:\a\QtBuild\pack"
          if (Test-Path $tmp) { Remove-Item $tmp -Recurse -Force }
          New-Item -ItemType Directory -Path (Join-Path $tmp $finalRoot) | Out-Null
          Copy-Item -Path "$qtRoot\*" -Destination (Join-Path $tmp $finalRoot) -Recurse -Force
          $archive=Join-Path "${{ github.workspace }}" $name
          Push-Location $tmp
          7z a "$archive" $finalRoot -mx=9 | Out-Null
          Pop-Location
          if (-not (Test-Path $archive)) { echo "Archive not found: $archive"; exit 1 }
          echo "ARCHIVE_NAME=$name" >> $env:GITHUB_ENV

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: qt${{ env.QT_VERSION }}-windows-x86_64-mingw_gcc${{ env.GCC_VERSION }}_${{ env.RUNTIME }}-${{ matrix.link_type }}_${{ matrix.build_type == 'release' && 'release' || matrix.build_type == 'debug' && 'debug' || 'relwithdebinfo' }}
          path: ${{ env.ARCHIVE_NAME }}
          if-no-files-found: error

      - name: Upload configure summary
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.link_type }}_${{ matrix.build_type }}
          path: ${{ env.REPORT_FILE }}
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.create_release == 'true' }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Flatten artifacts
        run: |
          find artifacts -type f -name "*.7z" -exec mv -t artifacts {} +
          find artifacts -type f -name "qt-build-report_*.txt" -exec mv -t artifacts {} + || true

      - name: Generate release tag
        id: tag
        run: |
          TAG_NAME="qt${{ env.QT_VERSION }}-windows-mingw${{ env.GCC_VERSION }}-${{ env.RUNTIME }}-$(date +'%Y%m%d%H%M%S')"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Generate release notes
        run: |
          cat > release_notes.md << 'EOF'
          # Qt Windows MinGW Build

          ## Summary
          - Database: PostgreSQL, MySQL, SQLite
          - QtGRPC: Protobuf
          - SSL: Schannel
          - C++20, skip QtWebEngine, skip examples/tests
          - Files pattern: qt{version}-windows-x86_64-mingw_gcc{gcc_version}_{runtime}-{link_type}_{build_type}.7z

          ## Configure Summaries (from config.summary)
          EOF
          echo "" >> release_notes.md
          for f in artifacts/qt-build-report_*.txt; do
            [ -f "$f" ] || continue
            echo "" >> release_notes.md
            echo "---- $(basename "$f" .txt) ----" >> release_notes.md
            echo '```' >> release_notes.md
            sed -e 's/\r$//' "$f" >> release_notes.md
            echo '```' >> release_notes.md
          done
          echo "" >> release_notes.md
          echo "Artifacts:" >> release_notes.md
          ls -1 artifacts/*.7z >> release_notes.md || true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag_name }}
          name: Qt ${{ env.QT_VERSION }} - MinGW ${{ env.GCC_VERSION }} (${{ env.RUNTIME }})
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: artifacts/*.7z
          fail_on_unmatched_files: true

      - name: Clean artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: qt${{ env.QT_VERSION }}-windows-x86_64-mingw_gcc${{ env.GCC_VERSION }}_${{ env.RUNTIME }}-*