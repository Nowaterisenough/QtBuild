# =============================================================================
# Qt 6 Windows x86_64 MinGW-GCC Build Matrix
# Standardized workflow for building Qt with MinGW-GCC on Windows
# =============================================================================

name: build-qt6-native-windows_x86_64_mingw_matrix

on:
  workflow_dispatch:
    inputs:
      qt_version:
        description: 'QT Version'
        required: true
        default: '6.9.2'
      compiler_version:
        description: 'GCC Version'
        required: true
        type: choice
        options:
        - '12.2.0'
        - '13.1.0'
        - '13.2.0'
        - '14.1.0'
        - '14.2.0'
        - '15.1.0'
        - '15.2.0'
        default: '15.2.0'
      runtime:
        description: 'Runtime (ucrt/msvcrt)'
        required: true
        default: 'ucrt'
        type: choice
        options:
        - ucrt
        - msvcrt
      vulkan_sdk:
        description: 'Vulkan support (none/runtime-*)'
        required: true
        type: choice
        options:
        - 'none'
        - 'runtime-1.3.290.0'
        - 'runtime-1.4.321.0'
        default: 'runtime-1.4.321.0'
      test_mode:
        description: 'Test Mode (only build qtbase)'
        required: true
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

env:
  QT_VERSION: ${{ github.event.inputs.qt_version || '6.9.2' }}
  COMPILER_VERSION: ${{ github.event.inputs.compiler_version || '15.2.0' }}
  RUNTIME: ${{ github.event.inputs.runtime || 'ucrt' }}
  VULKAN_CHOICE: ${{ github.event.inputs.vulkan_sdk || 'runtime-1.4.321.0' }}
  TEST_MODE: ${{ github.event.inputs.test_mode || 'false' }}
  ACTIONS_STEP_DEBUG: 'true'

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        link_type: [static, shared]
        build_type: [release, debug, release-sepdbg]
        exclude:
          - link_type: static
            build_type: debug
          - link_type: static
            build_type: release-sepdbg

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          architecture: 'x64'

      - name: Extract Qt version components
        id: qt_version
        shell: pwsh
        run: |
          $v="${{ env.QT_VERSION }}".Split('.')
          echo "major_minor=$($v[0]).$($v[1])" >> $env:GITHUB_OUTPUT

      - name: Resolve MinGW
        id: mingw
        shell: pwsh
        run: |
          $gcc="${{ env.COMPILER_VERSION }}"
          $rt="${{ env.RUNTIME }}"
          function Out($k,$v){echo "$k=$v" >> $env:GITHUB_OUTPUT}
          try {
            $rels = Invoke-RestMethod -Uri "https://api.github.com/repos/niXman/mingw-builds-binaries/releases" -Headers @{ "User-Agent"="GitHub-Actions" }
            $rel = $rels | Where-Object { $_.tag_name -like "$gcc-rt_v*-rev*" } | Select-Object -First 1
            if ($rel) {
              $asset = $rel.assets | Where-Object { $_.name -like "x86_64-$gcc-release-posix-seh-$rt-rt_v*-rev*.7z" } | Select-Object -First 1
              if ($asset) {
                Out "download_url" $asset.browser_download_url
                Out "file_name" $asset.name
                Out "found" "true"
                exit 0
              }
            }
          } catch { }
          $map = @{
            "15.2.0" = @{ rt="rt_v13"; rev="rev0" }
            "15.1.0" = @{ rt="rt_v12"; rev="rev0" }
            "14.2.0" = @{ rt="rt_v12"; rev="rev2" }
            "14.1.0" = @{ rt="rt_v12"; rev="rev0" }
            "13.2.0" = @{ rt="rt_v11"; rev="rev1" }
            "13.1.0" = @{ rt="rt_v11"; rev="rev1" }
            "12.2.0" = @{ rt="rt_v10"; rev="rev2" }
          }
          if (-not $map.ContainsKey($gcc)) { echo "Unsupported GCC: $gcc"; exit 1 }
          $rtv=$map[$gcc].rt; $rev=$map[$gcc].rev
          $name="x86_64-$gcc-release-posix-seh-$rt-$rtv-$rev.7z"
          $url="https://github.com/niXman/mingw-builds-binaries/releases/download/$gcc-$rtv-$rev/$name"
          Out "download_url" $url
          Out "file_name" $name
          Out "found" "fallback"

      - name: Setup MinGW64
        shell: pwsh
        run: |
          cd ..
          curl -L -o "${{ steps.mingw.outputs.file_name }}" "${{ steps.mingw.outputs.download_url }}"
          7z x "${{ steps.mingw.outputs.file_name }}"

      - name: Setup Ninja
        shell: pwsh
        run: |
          cd ..
          curl -L -o ninja.zip https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-win.zip
          mkdir ninja
          unzip -q ninja.zip -d ./ninja

      - name: Setup Vulkan SDK
        if: ${{ env.VULKAN_CHOICE != 'none' }}
        shell: pwsh
        run: |
          $choice="${{ env.VULKAN_CHOICE }}"
          $root="D:\a\QtBuild\VulkanSDK"
          New-Item -ItemType Directory -Force -Path $root | Out-Null

          switch ($choice) {
            'runtime-1.4.321.0' {
              $sdkVersion = "1.4.321.0"
              $hdrTag = "vulkan-sdk-1.4.321.0"
            }
            'runtime-1.3.290.0' {
              $sdkVersion = "1.3.290.0"
              $hdrTag = "v1.3.290"
            }
            default {
              Write-Host "Unsupported choice: $choice"; exit 1
            }
          }

          $work="$root\$sdkVersion"
          New-Item -ItemType Directory -Force -Path $work | Out-Null

          # 组装 SDK 结构
          $sdk="$work\sdk"
          $inc="$sdk\Include"
          $lib="$sdk\Lib"
          $bin="$sdk\Bin"
          New-Item -ItemType Directory -Force -Path $inc,$lib,$bin | Out-Null

          # 下载 Vulkan-Headers
          $hdrZip = Join-Path $work "Vulkan-Headers-$hdrTag.zip"
          $hdrUrl = "https://github.com/KhronosGroup/Vulkan-Headers/archive/refs/tags/$hdrTag.zip"
          Write-Host "Downloading Headers: $hdrUrl"
          try {
            Invoke-WebRequest -Uri $hdrUrl -OutFile $hdrZip -TimeoutSec 300
            if ((Get-Item $hdrZip).Length -lt 100000) { 
              Write-Host "Headers zip too small, trying alternative download..."; 
              curl -L -o "$hdrZip" "$hdrUrl" 
            }
          } catch {
            Write-Host "WebRequest failed, trying curl: $_"
            curl -L -o "$hdrZip" "$hdrUrl"
          }
          
          if (-not (Test-Path $hdrZip) -or (Get-Item $hdrZip).Length -lt 100000) { 
            echo "Headers download failed"; exit 1 
          }
          7z x "$hdrZip" -o"$work\headers" -y

          # 下载 Vulkan-Video 扩展头文件
          $videoZip = Join-Path $work "Vulkan-Video.zip"
          $videoUrl = "https://github.com/KhronosGroup/Vulkan-Headers/archive/refs/heads/main.zip"
          Write-Host "Downloading Vulkan Video Extensions: $videoUrl"
          try {
            Invoke-WebRequest -Uri $videoUrl -OutFile $videoZip -TimeoutSec 300
          } catch {
            curl -L -o "$videoZip" "$videoUrl"
          }
          if (Test-Path $videoZip) {
            7z x "$videoZip" -o"$work\video_headers" -y
          }

          # Include - 复制头文件
          $hdrRoot=(Get-ChildItem -Path "$work\headers" -Directory | Select-Object -First 1).FullName
          if (-not (Test-Path (Join-Path $hdrRoot "include\vulkan"))) {
            echo "Vulkan headers directory not found in extracted archive"; exit 1
          }
          New-Item -ItemType Directory -Force -Path (Join-Path $inc "vulkan") | Out-Null
          Copy-Item -Path (Join-Path $hdrRoot "include\vulkan\*") -Destination (Join-Path $inc "vulkan") -Recurse -Force

          # 复制 video 扩展头文件
          $videoRoot=(Get-ChildItem -Path "$work\video_headers" -Directory | Select-Object -First 1).FullName
          if ((Test-Path $videoRoot) -and (Test-Path (Join-Path $videoRoot "include\vk_video"))) {
            New-Item -ItemType Directory -Force -Path (Join-Path $inc "vk_video") | Out-Null
            Copy-Item -Path (Join-Path $videoRoot "include\vk_video\*") -Destination (Join-Path $inc "vk_video") -Recurse -Force
          } else {
            # 如果没有找到 vk_video，创建基本的占位符文件
            New-Item -ItemType Directory -Force -Path (Join-Path $inc "vk_video") | Out-Null
            $h264Content = "#ifndef VULKAN_VIDEO_CODEC_H264STD_H_`n#define VULKAN_VIDEO_CODEC_H264STD_H_`n// Minimal placeholder for H.264 video codec support`n#endif"
            Set-Content -Path (Join-Path $inc "vk_video\vulkan_video_codec_h264std.h") -Value $h264Content -Encoding UTF8
            
            $h265Content = "#ifndef VULKAN_VIDEO_CODEC_H265STD_H_`n#define VULKAN_VIDEO_CODEC_H265STD_H_`n// Minimal placeholder for H.265 video codec support`n#endif"
            Set-Content -Path (Join-Path $inc "vk_video\vulkan_video_codec_h265std.h") -Value $h265Content -Encoding UTF8
          }

          # 创建最小的 vulkan-1.lib 文件 (用于链接，实际运行时会动态加载)
          $libContent = "EXPORTS`nvkGetInstanceProcAddr`nvkCreateInstance`nvkEnumerateInstanceExtensionProperties`nvkEnumerateInstanceLayerProperties"
          $defFile = Join-Path $work "vulkan-1.def"
          Set-Content -Path $defFile -Value $libContent -Encoding ASCII
          
          # 使用 MinGW 工具创建导入库
          $mingwPath = "D:\a\QtBuild\mingw64\bin"
          $dlltoolPath = Join-Path $mingwPath "dlltool.exe"
          if (Test-Path $dlltoolPath) {
            & "$dlltoolPath" -d "$defFile" -l (Join-Path $lib "vulkan-1.lib") -k
          } else {
            # 如果 dlltool 不可用，创建一个占位符库文件
            Write-Host "dlltool not found, creating placeholder lib file"
            $placeholderLib = @(0x21, 0x3C, 0x61, 0x72, 0x63, 0x68, 0x3E, 0x0A) # "!<arch>" + newline
            [System.IO.File]::WriteAllBytes((Join-Path $lib "vulkan-1.lib"), $placeholderLib)
          }

          # 环境变量设置
          echo "VULKAN_SDK=$sdk" >> $env:GITHUB_ENV
          echo "VK_SDK_PATH=$sdk" >> $env:GITHUB_ENV
          echo "INCLUDE=$inc;$env:INCLUDE" >> $env:GITHUB_ENV
          echo "LIB=$lib;$env:LIB" >> $env:GITHUB_ENV

          # 校验
          if (-not (Test-Path "$sdk\Include\vulkan\vulkan.h")) { echo "Missing $sdk\Include\vulkan\vulkan.h"; exit 1 }
          if (-not (Test-Path "$sdk\Lib\vulkan-1.lib")) { echo "Missing $sdk\Lib\vulkan-1.lib"; exit 1 }
          Write-Host "Vulkan SDK ready at $sdk"
          Write-Host "Headers: $(Get-ChildItem "$sdk\Include\vulkan" | Measure-Object).Count files"

      - name: Setup PostgreSQL
        shell: pwsh
        run: |
          cd ..
          $v="16.6"
          $url="https://get.enterprisedb.com/postgresql/postgresql-$v-1-windows-x64-binaries.zip"
          curl -L -o postgresql.zip $url
          mkdir postgresql
          7z x postgresql.zip -opostgresql
          $pg=(Get-ChildItem -Path "postgresql" -Directory | Select-Object -First 1).FullName
          echo "PostgreSQL_ROOT=$pg" >> $env:GITHUB_ENV
          echo "$pg\bin" >> $env:GITHUB_PATH

      - name: Setup MySQL
        shell: pwsh
        run: |
          cd ..
          $v="8.0.35"
          $url="https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-$v-winx64.zip"
          curl -L -o mysql.zip $url
          7z x mysql.zip
          $mp=(Get-ChildItem -Directory -Filter "mysql-*" | Select-Object -First 1).FullName
          echo "MYSQL_ROOT=$mp" >> $env:GITHUB_ENV

      - name: Setup Protobuf
        shell: pwsh
        run: |
          cd ..
          curl -L -o protoc-win64.zip https://github.com/protocolbuffers/protobuf/releases/download/v30.2/protoc-30.2-win64.zip
          unzip -q protoc-win64.zip -d ./protoc
          echo "D:\a\QtBuild\protoc\bin" >> $env:GITHUB_PATH

      - name: Prepare directories and source
        shell: pwsh
        run: |
          cd ..
          mkdir Qt
          cd Qt
          mkdir "${{ env.QT_VERSION }}"
          mkdir "${{ env.QT_VERSION }}-${{ matrix.link_type }}"
          $mm="${{ steps.qt_version.outputs.major_minor }}"
          $ver="${{ env.QT_VERSION }}"
          curl -L -o qt-everywhere-src.zip "https://download.qt.io/official_releases/qt/$mm/$ver/single/qt-everywhere-src-$ver.zip"
          unzip -q qt-everywhere-src.zip -d "./$ver"

      - name: Run build script
        shell: cmd
        run: |
          setlocal
          set QT_VERSION=${{ env.QT_VERSION }}
          set COMPILER_VERSION=${{ env.COMPILER_VERSION }}
          set BUILD_TYPE=${{ matrix.build_type }}
          set LINK_TYPE=${{ matrix.link_type }}
          set RUNTIME=${{ env.RUNTIME }}
          set TEST_MODE=${{ env.TEST_MODE }}
          if "%BUILD_TYPE%"=="release-sepdbg" (set BUILD_TYPE=release& set SEPARATE_DEBUG=true) else (set SEPARATE_DEBUG=false)
          call D:\a\QtBuild\QtBuild\Qt6Build\build-qt6-native-windows_x86_64_mingw.cmd %QT_VERSION% %COMPILER_VERSION% %BUILD_TYPE% %LINK_TYPE% %SEPARATE_DEBUG% %RUNTIME% "" %TEST_MODE%
          endlocal

      - name: Export Qt configure summary
        shell: pwsh
        run: |
          $bt="${{ matrix.build_type }}"
          $lt="${{ matrix.link_type }}"
          $buildDir="D:\a\QtBuild\build"
          $summary = Join-Path $buildDir "config.summary"
          if (-not (Test-Path $summary)) {
            Write-Host "config.summary not found at $summary"
            Get-ChildItem $buildDir -Recurse -Filter "config.summary" -ErrorAction SilentlyContinue | Select-Object -First 1 | ForEach-Object { $summary=$_.FullName }
          }
          if (-not (Test-Path $summary)) { Write-Host "No config.summary found."; exit 1 }
          $out = Join-Path "${{ github.workspace }}" ("qt-build-report_" + $lt + "_" + $bt + ".txt")
          Copy-Item $summary $out -Force
          echo "REPORT_FILE=$out" >> $env:GITHUB_ENV

      - name: Package binaries
        shell: pwsh
        run: |
          $qt="${{ env.QT_VERSION }}"
          $gcc="${{ env.COMPILER_VERSION }}"
          $rt="${{ env.RUNTIME }}".ToLower()
          $lt="${{ matrix.link_type }}"
          $bt="${{ matrix.build_type }}"
          
          # Normalize build type name
          $btName = switch ($bt) { "release" {"release"} "debug" {"debug"} default {"relwithdebinfo"} }
          
          # Create standardized archive name
          # Standardized naming: qt{version}-windows-x86_64-mingw{version}-{runtime}-{linktype}_{buildtype}.7z
          # Strip patch version: 15.2.0 -> 15.2
          $gccShort = $gcc -replace '(\d+\.\d+)\.\d+', '$1'
          $name="qt$qt-windows-x86_64-mingw${gccShort}-${rt}-${lt}_${btName}.7z"
          $src="D:\a\QtBuild\Qt\$qt-$lt"
          if (-not (Test-Path $src)) { echo "Missing: $src"; exit 1 }
          $compDir=(Get-ChildItem -Path $src -Directory | Where-Object { $_.Name -like "mingw*" } | Select-Object -First 1)
          if (-not $compDir) { echo "No mingw* dir under $src"; exit 1 }
          $qtRoot=$compDir.FullName
          if (-not (Test-Path (Join-Path $qtRoot "bin"))) {
            $qtRoot=(Get-ChildItem -Path $compDir.FullName -Directory | Where-Object { Test-Path (Join-Path $_.FullName "bin\qtpaths.exe") } | Select-Object -First 1).FullName
          }
          if (-not $qtRoot) { echo "Qt installation not found."; exit 1 }
          $finalRoot="qt$qt-windows-x86_64-mingw${gccShort}-${rt}-${lt}_${btName}"
          $tmp="D:\a\QtBuild\pack"
          if (Test-Path $tmp) { Remove-Item $tmp -Recurse -Force }
          New-Item -ItemType Directory -Path (Join-Path $tmp $finalRoot) | Out-Null
          Copy-Item -Path "$qtRoot\*" -Destination (Join-Path $tmp $finalRoot) -Recurse -Force
          $archive=Join-Path "${{ github.workspace }}" $name
          Push-Location $tmp
          7z a "$archive" $finalRoot -mx=9 | Out-Null
          Pop-Location
          if (-not (Test-Path $archive)) { echo "Archive not found: $archive"; exit 1 }
          echo "ARCHIVE_NAME=$name" >> $env:GITHUB_ENV

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: qt${{ env.QT_VERSION }}-windows-x86_64-mingw${{ env.COMPILER_VERSION }}-${{ env.RUNTIME }}-${{ matrix.link_type }}_${{ matrix.build_type == 'release' && 'release' || matrix.build_type == 'debug' && 'debug' || 'relwithdebinfo' }}
          path: ${{ env.ARCHIVE_NAME }}
          if-no-files-found: error

      - name: Upload build report
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.link_type }}_${{ matrix.build_type }}
          path: ${{ env.REPORT_FILE }}
          if-no-files-found: error

      # Note: This workflow only builds and uploads artifacts
      # Use the 'release-qt-unified' workflow to create releases with all platforms